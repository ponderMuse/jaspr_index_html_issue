// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.0 (stable) (Tue Feb 13 10:25:19 2024 +0000) on "linux_x64"
// Module: packages/binary_codec/binary_codec
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk'], (function load__packages__binary_codec__binary_codec(dart_sdk) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const convert = dart_sdk.convert;
  const math = dart_sdk.math;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var byte_reader = Object.create(dart.library);
  var byte_writer = Object.create(dart.library);
  var binary_codec = Object.create(dart.library);
  var tags = Object.create(dart.library);
  var binary_codec$ = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $buffer = dartx.buffer;
  var $offsetInBytes = dartx.offsetInBytes;
  var $setRange = dartx.setRange;
  var $_set = dartx._set;
  var $asByteData = dartx.asByteData;
  var $getFloat64 = dartx.getFloat64;
  var $round = dartx.round;
  var $add = dartx.add;
  var $runtimeType = dartx.runtimeType;
  var $setFloat64 = dartx.setFloat64;
  var $bitLength = dartx.bitLength;
  var $floor = dartx.floor;
  var $truncate = dartx.truncate;
  var $toDouble = dartx.toDouble;
  var $toList = dartx.toList;
  var $entries = dartx.entries;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart_rti.findType("~(core|int)")))(),
    VoidToint: () => (T.VoidToint = dart.constFn(dart_rti.findType("core|int()")))(),
    intToUint8List: () => (T.intToUint8List = dart.constFn(dart_rti.findType("typed_data|Uint8List(core|int)")))(),
    Uint8List: () => (T.Uint8List = dart.constFn(dart_rti.findType("typed_data|Uint8List")))(),
    IterableOfintTovoid: () => (T.IterableOfintTovoid = dart.constFn(dart_rti.findType("~(core|Iterable<core|int>)")))(),
    VoidToUint8List: () => (T.VoidToUint8List = dart.constFn(dart_rti.findType("typed_data|Uint8List()")))(),
    BinaryCodec: () => (T.BinaryCodec = dart.constFn(dart_rti.findType("binary_codec__src__binary_codec|BinaryCodec")))(),
    ConverterOfUint8List$dynamic: () => (T.ConverterOfUint8List$dynamic = dart.constFn(dart_rti.findType("convert|Converter<typed_data|Uint8List,@>")))(),
    ConverterOfdynamic$Uint8List: () => (T.ConverterOfdynamic$Uint8List = dart.constFn(dart_rti.findType("convert|Converter<@,typed_data|Uint8List>")))(),
    Decoder: () => (T.Decoder = dart.constFn(dart_rti.findType("binary_codec__src__binary_codec|Decoder")))(),
    ObjectNTodynamic: () => (T.ObjectNTodynamic = dart.constFn(dart_rti.findType("@(core|Object?)")))(),
    ByteReaderTodynamic: () => (T.ByteReaderTodynamic = dart.constFn(dart_rti.findType("@(binary_codec__src__byte_reader|ByteReader)")))(),
    intAndByteReaderToint: () => (T.intAndByteReaderToint = dart.constFn(dart_rti.findType("core|int(core|int,binary_codec__src__byte_reader|ByteReader)")))(),
    ByteReaderTodouble: () => (T.ByteReaderTodouble = dart.constFn(dart_rti.findType("core|double(binary_codec__src__byte_reader|ByteReader)")))(),
    ByteReaderToint: () => (T.ByteReaderToint = dart.constFn(dart_rti.findType("core|int(binary_codec__src__byte_reader|ByteReader)")))(),
    intAndByteReaderToUint8List: () => (T.intAndByteReaderToUint8List = dart.constFn(dart_rti.findType("typed_data|Uint8List(core|int,binary_codec__src__byte_reader|ByteReader)")))(),
    intAndByteReaderToString: () => (T.intAndByteReaderToString = dart.constFn(dart_rti.findType("core|String(core|int,binary_codec__src__byte_reader|ByteReader)")))(),
    ByteReaderToList: () => (T.ByteReaderToList = dart.constFn(dart_rti.findType("core|List<@>(binary_codec__src__byte_reader|ByteReader)")))(),
    ByteReaderToMap: () => (T.ByteReaderToMap = dart.constFn(dart_rti.findType("core|Map<@,@>(binary_codec__src__byte_reader|ByteReader)")))(),
    Encoder: () => (T.Encoder = dart.constFn(dart_rti.findType("binary_codec__src__binary_codec|Encoder")))(),
    List: () => (T.List = dart.constFn(dart_rti.findType("core|List<@>")))(),
    Map: () => (T.Map = dart.constFn(dart_rti.findType("core|Map<@,@>")))(),
    ObjectNToUint8List: () => (T.ObjectNToUint8List = dart.constFn(dart_rti.findType("typed_data|Uint8List(core|Object?)")))(),
    dynamicAndByteWriterTovoid: () => (T.dynamicAndByteWriterTovoid = dart.constFn(dart_rti.findType("~(@,binary_codec__src__byte_writer|ByteWriter)")))(),
    doubleAndByteWriterTovoid: () => (T.doubleAndByteWriterTovoid = dart.constFn(dart_rti.findType("~(core|double,binary_codec__src__byte_writer|ByteWriter)")))(),
    intAndByteWriterTovoid: () => (T.intAndByteWriterTovoid = dart.constFn(dart_rti.findType("~(core|int,binary_codec__src__byte_writer|ByteWriter)")))(),
    Uint8ListAndByteWriterTovoid: () => (T.Uint8ListAndByteWriterTovoid = dart.constFn(dart_rti.findType("~(typed_data|Uint8List,binary_codec__src__byte_writer|ByteWriter)")))(),
    StringAndByteWriterTovoid: () => (T.StringAndByteWriterTovoid = dart.constFn(dart_rti.findType("~(core|String,binary_codec__src__byte_writer|ByteWriter)")))(),
    Uint8ListAndboolAndByteWriterTovoid: () => (T.Uint8ListAndboolAndByteWriterTovoid = dart.constFn(dart_rti.findType("~(typed_data|Uint8List,core|bool,binary_codec__src__byte_writer|ByteWriter)")))(),
    ListAndByteWriterTovoid: () => (T.ListAndByteWriterTovoid = dart.constFn(dart_rti.findType("~(core|List<@>,binary_codec__src__byte_writer|ByteWriter)")))(),
    MapAndByteWriterTovoid: () => (T.MapAndByteWriterTovoid = dart.constFn(dart_rti.findType("~(core|Map<@,@>,binary_codec__src__byte_writer|ByteWriter)")))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
      }, binary_codec.BinaryCodec.prototype));
    }
  }, false);
  var C = [void 0];
  var I = [
    "package:binary_codec/src/byte_reader.dart",
    "dart:typed_data",
    "dart:core",
    "org-dartlang-app:///packages/binary_codec/src/byte_writer.dart",
    "package:binary_codec/src/byte_writer.dart",
    "package:binary_codec/src/binary_codec.dart",
    "package:binary_codec/src/tags.dart"
  ];
  var _index = dart.privateName(byte_reader, "_index");
  var _data$ = dart.privateName(byte_reader, "_data");
  var _require = dart.privateName(byte_reader, "_require");
  byte_reader.ByteReader = class ByteReader extends core.Object {
    get currentIndex() {
      return this[_index];
    }
    get dataLength() {
      return this[_data$][$length];
    }
    static ['_#new#tearOff'](_data) {
      return new byte_reader.ByteReader.new(_data);
    }
    [_require](byteCount) {
      if (this[_index] + byteCount > this[_data$][$length]) {
        dart.throw(new core.ArgumentError.new("No more elements"));
      }
    }
    read() {
      let t$360;
      this[_require](1);
      return this[_data$][$_get]((t$360 = this[_index], this[_index] = t$360 + 1, t$360));
    }
    readAll(byteCount) {
      this[_require](byteCount);
      let result = typed_data.Uint8List.view(this[_data$][$buffer], this[_data$][$offsetInBytes] + this[_index], byteCount);
      this[_index] = this[_index] + byteCount;
      return result;
    }
  };
  (byte_reader.ByteReader.new = function(_data) {
    this[_index] = 0;
    this[_data$] = _data;
    ;
  }).prototype = byte_reader.ByteReader.prototype;
  dart.addTypeTests(byte_reader.ByteReader);
  dart.addRtiResources(byte_reader.ByteReader, ["binary_codec__src__byte_reader|ByteReader"]);
  dart.addTypeCaches(byte_reader.ByteReader);
  dart.setMethodSignature(byte_reader.ByteReader, () => dart.global.Object.setPrototypeOf({
    [_require]: T.intTovoid(),
    read: T.VoidToint(),
    readAll: T.intToUint8List()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(byte_reader.ByteReader))));
  dart.setGetterSignature(byte_reader.ByteReader, () => dart.global.Object.setPrototypeOf({
    currentIndex: T.int(),
    dataLength: T.int()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(byte_reader.ByteReader))));
  dart.setLibraryUri(byte_reader.ByteReader, I[0]);
  dart.setFieldSignature(byte_reader.ByteReader, () => dart.global.Object.setPrototypeOf({
    [_data$]: {type: T.Uint8List(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_index]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(byte_reader.ByteReader))));
  var _buffer = dart.privateName(byte_writer, "_buffer");
  var _length = dart.privateName(byte_writer, "_length");
  var _index$ = dart.privateName(byte_writer, "_index");
  var _reserve = dart.privateName(byte_writer, "_reserve");
  byte_writer.ByteWriter = class ByteWriter extends core.Object {
    get currentLength() {
      return this[_index$];
    }
    [_reserve](byteCount) {
      if (!(byteCount >= 0)) dart.assertFailed(null, I[3], 13, 12, "byteCount >= 0");
      while (this[_index$] + byteCount > this[_length]) {
        this[_length] = this[_length] * 2;
      }
      if (this[_length] !== this[_buffer][$length]) {
        let next = _native_typed_data.NativeUint8List.new(this[_length]);
        next[$setRange](0, this[_index$], this[_buffer]);
        this[_buffer] = next;
      }
    }
    write(byte) {
      let t$360;
      this[_reserve](1);
      this[_buffer][$_set]((t$360 = this[_index$], this[_index$] = t$360 + 1, t$360), byte);
    }
    writeAll(bytes) {
      this[_reserve](bytes[$length]);
      this[_buffer][$setRange](this[_index$], this[_index$] + bytes[$length], bytes);
      this[_index$] = this[_index$] + bytes[$length];
    }
    done() {
      let result = typed_data.Uint8List.view(this[_buffer][$buffer], 0, this[_index$]);
      this[_buffer] = _native_typed_data.NativeUint8List.new(8);
      this[_index$] = 0;
      return result;
    }
    static ['_#new#tearOff']() {
      return new byte_writer.ByteWriter.new();
    }
  };
  (byte_writer.ByteWriter.new = function() {
    this[_buffer] = _native_typed_data.NativeUint8List.new(8);
    this[_length] = 8;
    this[_index$] = 0;
    ;
  }).prototype = byte_writer.ByteWriter.prototype;
  dart.addTypeTests(byte_writer.ByteWriter);
  dart.addRtiResources(byte_writer.ByteWriter, ["binary_codec__src__byte_writer|ByteWriter"]);
  dart.addTypeCaches(byte_writer.ByteWriter);
  dart.setMethodSignature(byte_writer.ByteWriter, () => dart.global.Object.setPrototypeOf({
    [_reserve]: T.intTovoid(),
    write: T.intTovoid(),
    writeAll: T.IterableOfintTovoid(),
    done: T.VoidToUint8List()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(byte_writer.ByteWriter))));
  dart.setGetterSignature(byte_writer.ByteWriter, () => dart.global.Object.setPrototypeOf({currentLength: T.int()}, dart.getGetters(dart.global.Object.getPrototypeOf(byte_writer.ByteWriter))));
  dart.setLibraryUri(byte_writer.ByteWriter, I[4]);
  dart.setFieldSignature(byte_writer.ByteWriter, () => dart.global.Object.setPrototypeOf({
    [_buffer]: {type: T.Uint8List(), isConst: false, isFinal: false, libraryUri: I[1]},
    [_length]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[2]},
    [_index$]: {type: T.int(), isConst: false, isFinal: false, libraryUri: I[2]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(byte_writer.ByteWriter))));
  dart.setStaticFieldSignature(byte_writer.ByteWriter, () => ['_initialLength']);
  dart.defineLazy(byte_writer.ByteWriter, {
    /*byte_writer.ByteWriter._initialLength*/get _initialLength() {
      return 8;
    }
  }, false);
  binary_codec.BinaryCodec = class BinaryCodec extends convert.Codec$(dart_rti.findType("@"), dart_rti.findType("typed_data|Uint8List")) {
    static ['_#new#tearOff']() {
      return new binary_codec.BinaryCodec.new();
    }
    get decoder() {
      return new binary_codec.Decoder.new();
    }
    get encoder() {
      return new binary_codec.Encoder.new();
    }
  };
  (binary_codec.BinaryCodec.new = function() {
    this.$ti = this.$ti || T.BinaryCodec();
    dart.global.Object.getPrototypeOf(binary_codec.BinaryCodec).new.call(this);
    ;
  }).prototype = binary_codec.BinaryCodec.prototype;
  dart.addTypeTests(binary_codec.BinaryCodec);
  dart.addRtiResources(binary_codec.BinaryCodec, ["binary_codec__src__binary_codec|BinaryCodec"]);
  dart.addTypeCaches(binary_codec.BinaryCodec);
  dart.setGetterSignature(binary_codec.BinaryCodec, () => dart.global.Object.setPrototypeOf({
    decoder: T.ConverterOfUint8List$dynamic(),
    encoder: T.ConverterOfdynamic$Uint8List()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(binary_codec.BinaryCodec))));
  dart.setLibraryUri(binary_codec.BinaryCodec, I[5]);
  var _as = dart.privateName(dart_rti, "_as");
  binary_codec.Decoder = class Decoder extends convert.Converter$(dart_rti.findType("typed_data|Uint8List"), dart_rti.findType("@")) {
    convert(input) {
      T.Uint8List()[_as](input);
      return this.decode(new byte_reader.ByteReader.new(input));
    }
    decode(reader) {
      let tag = reader.read();
      if (tag < 128) {
        return tag - 0;
      } else if (tag < 192) {
        return -(tag - 128);
      } else if (tag < 216) {
        return this.decodeBlob(tag - 192, reader);
      } else if (tag < 240) {
        return this.decodeText(tag - 216, reader);
      } else if (tag < 248) {
        return this.decodeInt(tag, reader);
      } else if (tag === 248) {
        return null;
      } else if (tag === 249) {
        return true;
      } else if (tag === 250) {
        return false;
      } else if (tag === 251) {
        return this.decodeDouble(reader);
      } else if (tag === 252) {
        return this.decodeBlob(this.decodeLength(reader), reader);
      } else if (tag === 253) {
        return this.decodeText(this.decodeLength(reader), reader);
      } else if (tag === 254) {
        return this.decodeList(reader);
      } else if (tag === 255) {
        return this.decodeMap(reader);
      } else {
        dart.throw("Tag '" + dart.strSafe(tag) + "' not handled");
      }
    }
    decodeInt(tag, reader) {
      let byteCountMinusOne = tag - 240;
      let value = 0;
      for (let i = 0; i < byteCountMinusOne; i = i + 1) {
        value = value + dart.asInt(math.pow(2, i * 8) * reader.read());
      }
      let last = reader.read();
      value = value + dart.asInt(math.pow(2, byteCountMinusOne * 8) * (last & 127));
      if ((last & 128) !== 0) {
        value = value - dart.asInt(math.pow(2, byteCountMinusOne * 8 + 7));
      }
      return value;
    }
    decodeDouble(reader) {
      let bytes = reader.readAll(8);
      return bytes[$buffer][$asByteData](bytes[$offsetInBytes], 8)[$getFloat64](0, typed_data.Endian.little);
    }
    decodeLength(reader) {
      let tag = reader.read();
      if (tag < 128) {
        return tag - 0;
      } else if (tag < 240) {
        dart.throw("Tag '" + dart.strSafe(tag) + "' is no length");
      } else if (tag < 248) {
        return this.decodeInt(tag, reader);
      } else if (tag === 251) {
        let length = this.decodeDouble(reader);
        let rounded = length[$round]();
        if (length !== rounded) {
          dart.throw("Tag '" + dart.strSafe(tag) + "' is a double value (" + dart.strSafe(length) + ") and no length (lengths must have no decimal places)");
        }
        return rounded;
      } else {
        dart.throw("Tag '" + dart.strSafe(tag) + "' is no length");
      }
    }
    decodeBlob(length, reader) {
      return reader.readAll(length);
    }
    decodeText(length, reader) {
      return convert.utf8.decode(this.decodeBlob(length, reader));
    }
    decodeList(reader) {
      let length = this.decodeLength(reader);
      let list = [];
      for (let i = 0; i < length; i = i + 1) {
        list[$add](this.decode(reader));
      }
      return list;
    }
    decodeMap(reader) {
      let length = this.decodeLength(reader);
      let map = new _js_helper.LinkedMap.new();
      for (let i = 0; i < length; i = i + 1) {
        let key = this.decode(reader);
        let value = this.decode(reader);
        map[$_set](key, value);
      }
      return map;
    }
    static ['_#new#tearOff']() {
      return new binary_codec.Decoder.new();
    }
  };
  (binary_codec.Decoder.new = function() {
    this.$ti = this.$ti || T.Decoder();
    dart.global.Object.getPrototypeOf(binary_codec.Decoder).new.call(this);
    ;
  }).prototype = binary_codec.Decoder.prototype;
  dart.addTypeTests(binary_codec.Decoder);
  dart.addRtiResources(binary_codec.Decoder, ["binary_codec__src__binary_codec|Decoder"]);
  dart.addTypeCaches(binary_codec.Decoder);
  dart.setMethodSignature(binary_codec.Decoder, () => dart.global.Object.setPrototypeOf({
    convert: T.ObjectNTodynamic(),
    decode: T.ByteReaderTodynamic(),
    decodeInt: T.intAndByteReaderToint(),
    decodeDouble: T.ByteReaderTodouble(),
    decodeLength: T.ByteReaderToint(),
    decodeBlob: T.intAndByteReaderToUint8List(),
    decodeText: T.intAndByteReaderToString(),
    decodeList: T.ByteReaderToList(),
    decodeMap: T.ByteReaderToMap()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binary_codec.Decoder))));
  dart.setLibraryUri(binary_codec.Decoder, I[5]);
  var _is = dart.privateName(dart_rti, "_is");
  binary_codec.Encoder = class Encoder extends convert.Converter$(dart_rti.findType("@"), dart_rti.findType("typed_data|Uint8List")) {
    convert(value) {
      let writer = new byte_writer.ByteWriter.new();
      this.encode(value, writer);
      return writer.done();
    }
    encode(value, writer) {
      if (value == null) {
        writer.write(248);
      } else if (typeof value == 'boolean') {
        writer.write(dart.test(value) ? 249 : 250);
      } else if (typeof value == 'number') {
        this.encodeDouble(value, writer);
      } else if (T.int()[_is](value)) {
        this.encodeInt(value, writer);
      } else if (T.Uint8List()[_is](value)) {
        this.encodeBlob(value, writer);
      } else if (typeof value == 'string') {
        this.encodeText(value, writer);
      } else if (T.List()[_is](value)) {
        this.encodeList(value, writer);
      } else if (T.Map()[_is](value)) {
        this.encodeMap(value, writer);
      } else {
        dart.throw("Type of " + dart.str(value) + " is not supported (" + dart.str(dart.runtimeType(value)) + ")");
      }
    }
    encodeDouble(value, writer) {
      writer.write(251);
      let bytes = _native_typed_data.NativeUint8List.new(8);
      bytes[$buffer][$asByteData]()[$setFloat64](0, value, typed_data.Endian.little);
      writer.writeAll(bytes);
    }
    encodeInt(value, writer) {
      if (value >= 0 && value < 128) {
        writer.write(0 + value);
      } else if (value < 0 && value > -64) {
        writer.write(128 - value);
      } else {
        let byteCountMinusOne = (value[$bitLength] / 8)[$floor]();
        writer.write(240 + byteCountMinusOne);
        let neg = value < 0;
        if (neg) {
          value = -value - 1;
        }
        for (let i = 0; i <= byteCountMinusOne; i = i + 1) {
          let byte = (value / math.pow(2, i * 8))[$truncate]();
          if (neg) {
            byte = -(byte + 1);
          }
          writer.write(byte);
        }
      }
    }
    encodeLength(length, writer) {
      if (0 === 0.0) {
        this.encodeDouble(length[$toDouble](), writer);
      } else {
        this.encodeInt(length, writer);
      }
    }
    encodeBlob(value, writer) {
      this.encodeData(value, false, writer);
    }
    encodeText(value, writer) {
      this.encodeData(convert.utf8.encode(value), true, writer);
    }
    encodeData(value, isText, writer) {
      let length = value[$length];
      if (length < 24) {
        let tag = isText ? 216 : 192;
        writer.write(tag + length);
      } else {
        writer.write(isText ? 253 : 252);
        this.encodeLength(length, writer);
      }
      writer.writeAll(value);
    }
    encodeList(value, writer) {
      writer.write(254);
      this.encodeLength(value[$length], writer);
      for (let element of value[$toList]()) {
        this.encode(element, writer);
      }
    }
    encodeMap(value, writer) {
      writer.write(255);
      this.encodeLength(value[$length], writer);
      for (let entry of value[$entries][$toList]()) {
        this.encode(entry.key, writer);
        this.encode(entry.value, writer);
      }
    }
    static ['_#new#tearOff']() {
      return new binary_codec.Encoder.new();
    }
  };
  (binary_codec.Encoder.new = function() {
    this.$ti = this.$ti || T.Encoder();
    dart.global.Object.getPrototypeOf(binary_codec.Encoder).new.call(this);
    ;
  }).prototype = binary_codec.Encoder.prototype;
  dart.addTypeTests(binary_codec.Encoder);
  dart.addRtiResources(binary_codec.Encoder, ["binary_codec__src__binary_codec|Encoder"]);
  dart.addTypeCaches(binary_codec.Encoder);
  dart.setMethodSignature(binary_codec.Encoder, () => dart.global.Object.setPrototypeOf({
    convert: T.ObjectNToUint8List(),
    encode: T.dynamicAndByteWriterTovoid(),
    encodeDouble: T.doubleAndByteWriterTovoid(),
    encodeInt: T.intAndByteWriterTovoid(),
    encodeLength: T.intAndByteWriterTovoid(),
    encodeBlob: T.Uint8ListAndByteWriterTovoid(),
    encodeText: T.StringAndByteWriterTovoid(),
    encodeData: T.Uint8ListAndboolAndByteWriterTovoid(),
    encodeList: T.ListAndByteWriterTovoid(),
    encodeMap: T.MapAndByteWriterTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binary_codec.Encoder))));
  dart.setLibraryUri(binary_codec.Encoder, I[5]);
  tags.Tags = class Tags extends core.Object {
    static ['_#new#tearOff']() {
      return new tags.Tags.new();
    }
  };
  (tags.Tags.new = function() {
    ;
  }).prototype = tags.Tags.prototype;
  dart.addTypeTests(tags.Tags);
  dart.addRtiResources(tags.Tags, ["binary_codec__src__tags|Tags"]);
  dart.addTypeCaches(tags.Tags);
  dart.setLibraryUri(tags.Tags, I[6]);
  dart.setStaticFieldSignature(tags.Tags, () => ['vPosInt', 'vNegInt', 'vShortBlob', 'vShortText', 'vInt', 'vNull', 'vTrue', 'vFalse', 'vDouble', 'vBlob', 'vText', 'vList', 'vMap']);
  dart.defineLazy(tags.Tags, {
    /*tags.Tags.vPosInt*/get vPosInt() {
      return 0;
    },
    /*tags.Tags.vNegInt*/get vNegInt() {
      return 128;
    },
    /*tags.Tags.vShortBlob*/get vShortBlob() {
      return 192;
    },
    /*tags.Tags.vShortText*/get vShortText() {
      return 216;
    },
    /*tags.Tags.vInt*/get vInt() {
      return 240;
    },
    /*tags.Tags.vNull*/get vNull() {
      return 248;
    },
    /*tags.Tags.vTrue*/get vTrue() {
      return 249;
    },
    /*tags.Tags.vFalse*/get vFalse() {
      return 250;
    },
    /*tags.Tags.vDouble*/get vDouble() {
      return 251;
    },
    /*tags.Tags.vBlob*/get vBlob() {
      return 252;
    },
    /*tags.Tags.vText*/get vText() {
      return 253;
    },
    /*tags.Tags.vList*/get vList() {
      return 254;
    },
    /*tags.Tags.vMap*/get vMap() {
      return 255;
    }
  }, false);
  dart.defineLazy(binary_codec$, {
    /*binary_codec$.binaryCodec*/get binaryCodec() {
      return C[0] || CT.C0;
    }
  }, false);
  dart.moduleConstCaches.set("packages/binary_codec/binary_codec", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"typed_data|Uint8List":{"List.E":"core|int","core|List":["core|int"],"typed_data|_TypedIntList":[],"Iterable.E":"core|int","core|Iterable":["core|int"],"_ListIterable.E":"core|int","core|_ListIterable":["core|int"],"typed_data|TypedData":[],"EfficientLengthIterable.T":"core|int","_internal|EfficientLengthIterable":["core|int"],"HideEfficientLengthIterable.T":"core|int","_internal|HideEfficientLengthIterable":["core|int"]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"typed_data|_TypedIntList":{"typed_data|TypedData":[]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"binary_codec__src__binary_codec|BinaryCodec":{"Codec.S":"@","Codec.T":"typed_data|Uint8List","convert|Codec":["@","typed_data|Uint8List"]},"convert|Codec":{"Codec.S":"1","Codec.T":"2"},"convert|Converter":{"Converter.S":"1","Converter.T":"2","StreamTransformerBase.S":"1","StreamTransformerBase.T":"2","async|StreamTransformerBase":["1","2"],"StreamTransformer.S":"1","StreamTransformer.T":"2","async|StreamTransformer":["1","2"]},"async|StreamTransformerBase":{"StreamTransformerBase.S":"1","StreamTransformerBase.T":"2","StreamTransformer.S":"1","StreamTransformer.T":"2","async|StreamTransformer":["1","2"]},"async|StreamTransformer":{"StreamTransformer.S":"1","StreamTransformer.T":"2"},"binary_codec__src__binary_codec|Decoder":{"Converter.S":"typed_data|Uint8List","Converter.T":"@","convert|Converter":["typed_data|Uint8List","@"],"StreamTransformerBase.S":"typed_data|Uint8List","StreamTransformerBase.T":"@","async|StreamTransformerBase":["typed_data|Uint8List","@"],"StreamTransformer.S":"typed_data|Uint8List","StreamTransformer.T":"@","async|StreamTransformer":["typed_data|Uint8List","@"]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Map":{"Map.K":"1","Map.V":"2"},"binary_codec__src__binary_codec|Encoder":{"Converter.S":"@","Converter.T":"typed_data|Uint8List","convert|Converter":["@","typed_data|Uint8List"],"StreamTransformerBase.S":"@","StreamTransformerBase.T":"typed_data|Uint8List","async|StreamTransformerBase":["@","typed_data|Uint8List"],"StreamTransformer.S":"@","StreamTransformer.T":"typed_data|Uint8List","async|StreamTransformer":["@","typed_data|Uint8List"]}}'));
  dart.trackLibraries("packages/binary_codec/binary_codec", {
    "package:binary_codec/src/byte_reader.dart": byte_reader,
    "package:binary_codec/src/byte_writer.dart": byte_writer,
    "package:binary_codec/src/binary_codec.dart": binary_codec,
    "package:binary_codec/src/tags.dart": tags,
    "package:binary_codec/binary_codec.dart": binary_codec$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["src/byte_reader.dart","src/byte_writer.dart","src/binary_codec.dart","src/tags.dart","binary_codec.dart"],"names":[],"mappings":"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","file":"binary_codec.ddc.js"}');
  // Exports:
  return {
    src__byte_reader: byte_reader,
    src__byte_writer: byte_writer,
    src__binary_codec: binary_codec,
    src__tags: tags,
    binary_codec: binary_codec$
  };
}));

//# sourceMappingURL=binary_codec.ddc.js.map

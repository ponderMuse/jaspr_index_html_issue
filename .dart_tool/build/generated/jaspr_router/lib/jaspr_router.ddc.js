// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.3.0 (stable) (Tue Feb 13 10:25:19 2024 +0000) on "linux_x64"
// Module: packages/jaspr_router/jaspr_router
// Flags: newRuntimeTypes(true), soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/jaspr/browser', 'packages/jaspr/src/foundation/annotations'], (function load__packages__jaspr_router__jaspr_router(dart_sdk, packages__jaspr__browser, packages__jaspr__src__foundation__annotations) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const developer = dart_sdk.developer;
  const html = dart_sdk.html;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const html$ = packages__jaspr__browser.src__components__html__html;
  const framework = packages__jaspr__browser.src__framework__framework;
  const basic = packages__jaspr__browser.src__components__basic;
  const async$ = packages__jaspr__browser.src__components__async;
  const synchronous_future = packages__jaspr__src__foundation__annotations.src__foundation__synchronous_future;
  const object = packages__jaspr__src__foundation__annotations.src__foundation__object;
  var error_screen = Object.create(dart.library);
  var extensions = Object.create(dart.library);
  var router$ = Object.create(dart.library);
  var typedefs = Object.create(dart.library);
  var configuration = Object.create(dart.library);
  var state$ = Object.create(dart.library);
  var inherited_router = Object.create(dart.library);
  var route = Object.create(dart.library);
  var path_utils = Object.create(dart.library);
  var errors = Object.create(dart.library);
  var platform = Object.create(dart.library);
  var platform_web = Object.create(dart.library);
  var parser = Object.create(dart.library);
  var redirection = Object.create(dart.library);
  var matching = Object.create(dart.library);
  var match$ = Object.create(dart.library);
  var builder$ = Object.create(dart.library);
  var link = Object.create(dart.library);
  var jaspr_router = Object.create(dart.library);
  var $toString = dartx.toString;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $where = dartx.where;
  var $map = dartx.map;
  var $isNotEmpty = dartx.isNotEmpty;
  var $startsWith = dartx.startsWith;
  var $endsWith = dartx.endsWith;
  var $containsKey = dartx.containsKey;
  var $remove = dartx.remove;
  var $forEach = dartx.forEach;
  var $isEmpty = dartx.isEmpty;
  var $toLowerCase = dartx.toLowerCase;
  var $keys = dartx.keys;
  var $contains = dartx.contains;
  var $entries = dartx.entries;
  var $padLeft = dartx.padLeft;
  var $substring = dartx.substring;
  var $replaceFirstMapped = dartx.replaceFirstMapped;
  var $replaceFirst = dartx.replaceFirst;
  var $matchAsPrefix = dartx.matchAsPrefix;
  var $onPopState = dartx.onPopState;
  var $state = dartx.state;
  var $history = dartx.history;
  var $pushState = dartx.pushState;
  var $replaceState = dartx.replaceState;
  var $join = dartx.join;
  var $last = dartx.last;
  var $reversed = dartx.reversed;
  var $fold = dartx.fold;
  var $first = dartx.first;
  var $addAll = dartx.addAll;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(true);
  var T = {
    Component: () => (T.Component = dart.constFn(dart_rti.findType("jaspr__src__framework__framework|Component")))(),
    SyncIterableOfComponent: () => (T.SyncIterableOfComponent = dart.constFn(_js_helper.SyncIterable$(T.Component())))(),
    BuildContextToIterableOfComponent: () => (T.BuildContextToIterableOfComponent = dart.constFn(dart_rti.findType("core|Iterable<jaspr__src__framework__framework|Component>(jaspr__src__framework__framework|BuildContext)")))(),
    ExceptionN: () => (T.ExceptionN = dart.constFn(dart_rti.findType("core|Exception?")))(),
    String__ToFutureOfvoid: () => (T.String__ToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(core|String{extra:core|Object?})")))(),
    String: () => (T.String = dart.constFn(dart_rti.findType("core|String")))(),
    dynamic: () => (T.dynamic = dart.constFn(dart_rti.findType("@")))(),
    String__ToFutureOfvoid$1: () => (T.String__ToFutureOfvoid$1 = dart.constFn(dart_rti.findType("async|Future<~>(core|String{extra:core|Object?,params:core|Map<core|String,core|String>,queryParams:core|Map<core|String,@>})")))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti.findType("~()")))(),
    String__Tovoid: () => (T.String__Tovoid = dart.constFn(dart_rti.findType("~(core|String{extra:core|Object?})")))(),
    String__Tovoid$1: () => (T.String__Tovoid$1 = dart.constFn(dart_rti.findType("~(core|String{extra:core|Object?,params:core|Map<core|String,core|String>,queryParams:core|Map<core|String,@>})")))(),
    BuildContextAndRouteStateToNull: () => (T.BuildContextAndRouteStateToNull = dart.constFn(dart_rti.findType("core|Null(jaspr__src__framework__framework|BuildContext,jaspr_router__src__state|RouteState)")))(),
    StatefulElement: () => (T.StatefulElement = dart.constFn(dart_rti.findType("jaspr__src__framework__framework|StatefulElement")))(),
    RouterState: () => (T.RouterState = dart.constFn(dart_rti.findType("jaspr_router__src__router|RouterState")))(),
    InheritedRouter: () => (T.InheritedRouter = dart.constFn(dart_rti.findType("jaspr_router__src__misc__inherited_router|InheritedRouter")))(),
    RouteConfiguration: () => (T.RouteConfiguration = dart.constFn(dart_rti.findType("jaspr_router__src__configuration|RouteConfiguration")))(),
    RouteInformationParser: () => (T.RouteInformationParser = dart.constFn(dart_rti.findType("jaspr_router__src__parser|RouteInformationParser")))(),
    RouteBuilder: () => (T.RouteBuilder = dart.constFn(dart_rti.findType("jaspr_router__src__builder|RouteBuilder")))(),
    VoidToStateOfStatefulComponent: () => (T.VoidToStateOfStatefulComponent = dart.constFn(dart_rti.findType("jaspr__src__framework__framework|State<jaspr__src__framework__framework|StatefulComponent>()")))(),
    BuildContextToRouterState: () => (T.BuildContextToRouterState = dart.constFn(dart_rti.findType("jaspr_router__src__router|RouterState(jaspr__src__framework__framework|BuildContext)")))(),
    BuildContextToRouterStateN: () => (T.BuildContextToRouterStateN = dart.constFn(dart_rti.findType("jaspr_router__src__router|RouterState?(jaspr__src__framework__framework|BuildContext)")))(),
    ListOfRouteBase: () => (T.ListOfRouteBase = dart.constFn(dart_rti.findType("core|List<jaspr_router__src__route|RouteBase>")))(),
    BuildContextAndRouteStateToNComponent: () => (T.BuildContextAndRouteStateToNComponent = dart.constFn(dart_rti.findType("jaspr__src__framework__framework|Component(jaspr__src__framework__framework|BuildContext,jaspr_router__src__state|RouteState)?")))(),
    BuildContextAndRouteStateToNFutureOrOfStringN: () => (T.BuildContextAndRouteStateToNFutureOrOfStringN = dart.constFn(dart_rti.findType("core|String?/(jaspr__src__framework__framework|BuildContext,jaspr_router__src__state|RouteState)?")))(),
    int: () => (T.int = dart.constFn(dart_rti.findType("core|int")))(),
    RouteConfigurationN: () => (T.RouteConfigurationN = dart.constFn(dart_rti.findType("jaspr_router__src__configuration|RouteConfiguration?")))(),
    RouteInformationParserN: () => (T.RouteInformationParserN = dart.constFn(dart_rti.findType("jaspr_router__src__parser|RouteInformationParser?")))(),
    RouteBuilderN: () => (T.RouteBuilderN = dart.constFn(dart_rti.findType("jaspr_router__src__builder|RouteBuilder?")))(),
    Object: () => (T.Object = dart.constFn(dart_rti.findType("core|Object")))(),
    RouteLoader: () => (T.RouteLoader = dart.constFn(dart_rti.findType("jaspr_router__src__router|RouteLoader")))(),
    ObjectN__Tovoid: () => (T.ObjectN__Tovoid = dart.constFn(dart_rti.findType("~(core|Object?{url:core|String?})")))(),
    Null: () => (T.Null = dart.constFn(dart_rti.findType("core|Null")))(),
    voidToNull: () => (T.voidToNull = dart.constFn(dart_rti.findType("core|Null(~)")))(),
    Router: () => (T.Router = dart.constFn(dart_rti.findType("jaspr_router__src__router|Router")))(),
    RouteMatchList: () => (T.RouteMatchList = dart.constFn(dart_rti.findType("jaspr_router__src__matching|RouteMatchList")))(),
    void: () => (T.void = dart.constFn(dart_rti.findType("~")))(),
    RouteMatchListToNull: () => (T.RouteMatchListToNull = dart.constFn(dart_rti.findType("core|Null(jaspr_router__src__matching|RouteMatchList)")))(),
    LazyRouteMixin: () => (T.LazyRouteMixin = dart.constFn(dart_rti.findType("jaspr_router__src__route|LazyRouteMixin")))(),
    ShellRoute: () => (T.ShellRoute = dart.constFn(dart_rti.findType("jaspr_router__src__route|ShellRoute")))(),
    voidToRouteMatchList: () => (T.voidToRouteMatchList = dart.constFn(dart_rti.findType("jaspr_router__src__matching|RouteMatchList(~)")))(),
    VoidToFutureOfvoid: () => (T.VoidToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>()")))(),
    StringToFutureOfvoid: () => (T.StringToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(core|String)")))(),
    RouteMatchListToFutureOfRouteMatchList: () => (T.RouteMatchListToFutureOfRouteMatchList = dart.constFn(dart_rti.findType("async|Future<jaspr_router__src__matching|RouteMatchList>(jaspr_router__src__matching|RouteMatchList)")))(),
    String__ToString: () => (T.String__ToString = dart.constFn(dart_rti.findType("core|String(core|String{params:core|Map<core|String,core|String>,queryParams:core|Map<core|String,@>})")))(),
    String__ToFutureOfvoid$2: () => (T.String__ToFutureOfvoid$2 = dart.constFn(dart_rti.findType("async|Future<~>(core|String{extra:core|Object?,replace:core|bool,updateHistory:core|bool})")))(),
    String__ToFutureOfRouteMatchList: () => (T.String__ToFutureOfRouteMatchList = dart.constFn(dart_rti.findType("async|Future<jaspr_router__src__matching|RouteMatchList>(core|String{extra:core|Object?})")))(),
    RouteMatchListN: () => (T.RouteMatchListN = dart.constFn(dart_rti.findType("jaspr_router__src__matching|RouteMatchList?")))(),
    MapOfObject$RouteLoader: () => (T.MapOfObject$RouteLoader = dart.constFn(dart_rti.findType("core|Map<core|Object,jaspr_router__src__router|RouteLoader>")))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart_rti.findType("core|Null()")))(),
    RouteLoaderTobool: () => (T.RouteLoaderTobool = dart.constFn(dart_rti.findType("core|bool(jaspr_router__src__router|RouteLoader)")))(),
    Future: () => (T.Future = dart.constFn(dart_rti.findType("async|Future<@>")))(),
    RouteLoaderToFuture: () => (T.RouteLoaderToFuture = dart.constFn(dart_rti.findType("async|Future<@>(jaspr_router__src__router|RouteLoader)")))(),
    IterableOfRouteLoaderToFutureOfvoid: () => (T.IterableOfRouteLoaderToFutureOfvoid = dart.constFn(dart_rti.findType("async|Future<~>(core|Iterable<jaspr_router__src__router|RouteLoader>)")))(),
    bool: () => (T.bool = dart.constFn(dart_rti.findType("core|bool")))(),
    Route: () => (T.Route = dart.constFn(dart_rti.findType("jaspr_router__src__route|Route")))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti.findType("core|bool()")))(),
    ListOfRouteBaseAndboolTobool: () => (T.ListOfRouteBaseAndboolTobool = dart.constFn(dart_rti.findType("core|bool(core|List<jaspr_router__src__route|RouteBase>,core|bool)")))(),
    ListOfRouteBaseAndMapOfString$RouteTobool: () => (T.ListOfRouteBaseAndMapOfString$RouteTobool = dart.constFn(dart_rti.findType("core|bool(core|List<jaspr_router__src__route|RouteBase>,core|Map<core|String,jaspr_router__src__route|Route>)")))(),
    VoidToString: () => (T.VoidToString = dart.constFn(dart_rti.findType("core|String()")))(),
    ListOfRouteBaseAndStringAndint__Tovoid: () => (T.ListOfRouteBaseAndStringAndint__Tovoid = dart.constFn(dart_rti.findType("~(core|List<jaspr_router__src__route|RouteBase>,core|String,core|int,core|StringBuffer)")))(),
    StringAndListOfRouteBaseTovoid: () => (T.StringAndListOfRouteBaseTovoid = dart.constFn(dart_rti.findType("~(core|String,core|List<jaspr_router__src__route|RouteBase>)")))(),
    BuildContextAndRouteStateToFutureOrOfStringN: () => (T.BuildContextAndRouteStateToFutureOrOfStringN = dart.constFn(dart_rti.findType("core|String?/(jaspr__src__framework__framework|BuildContext,jaspr_router__src__state|RouteState)")))(),
    MapOfString$String: () => (T.MapOfString$String = dart.constFn(dart_rti.findType("core|Map<core|String,core|String>")))(),
    ListOfString: () => (T.ListOfString = dart.constFn(dart_rti.findType("core|List<core|String>")))(),
    RouteState: () => (T.RouteState = dart.constFn(dart_rti.findType("jaspr_router__src__state|RouteState")))(),
    InheritedRouteState: () => (T.InheritedRouteState = dart.constFn(dart_rti.findType("jaspr_router__src__misc__inherited_router|InheritedRouteState")))(),
    BuildContextToRouteState: () => (T.BuildContextToRouteState = dart.constFn(dart_rti.findType("jaspr_router__src__state|RouteState(jaspr__src__framework__framework|BuildContext)")))(),
    BuildContextToRouteStateN: () => (T.BuildContextToRouteStateN = dart.constFn(dart_rti.findType("jaspr_router__src__state|RouteState?(jaspr__src__framework__framework|BuildContext)")))(),
    StringN: () => (T.StringN = dart.constFn(dart_rti.findType("core|String?")))(),
    MapOfString$ListOfString: () => (T.MapOfString$ListOfString = dart.constFn(dart_rti.findType("core|Map<core|String,core|List<core|String>>")))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart_rti.findType("core|Object?")))(),
    ObjectNTobool: () => (T.ObjectNTobool = dart.constFn(dart_rti.findType("core|bool(core|Object?)")))(),
    RouteBase: () => (T.RouteBase = dart.constFn(dart_rti.findType("jaspr_router__src__route|RouteBase")))(),
    __ToRoute: () => (T.__ToRoute = dart.constFn(dart_rti.findType("jaspr_router__src__route|Route({builder:jaspr__src__framework__framework|Component(jaspr__src__framework__framework|BuildContext,jaspr_router__src__state|RouteState)?,load!async|Future<~>(),name:core|String?,path!core|String,redirect:core|String?/(jaspr__src__framework__framework|BuildContext,jaspr_router__src__state|RouteState)?,routes:core|List<jaspr_router__src__route|RouteBase>,title:core|String?})")))(),
    RegExp: () => (T.RegExp = dart.constFn(dart_rti.findType("core|RegExp")))(),
    RegExpN: () => (T.RegExpN = dart.constFn(dart_rti.findType("core|RegExp?")))(),
    __ToShellRoute: () => (T.__ToShellRoute = dart.constFn(dart_rti.findType("jaspr_router__src__route|ShellRoute({builder!jaspr__src__framework__framework|Component(jaspr__src__framework__framework|BuildContext,jaspr_router__src__state|RouteState,jaspr__src__framework__framework|Component),load!async|Future<~>(),routes:core|List<jaspr_router__src__route|RouteBase>})")))(),
    BuildContextAndRouteStateAndComponentToComponent: () => (T.BuildContextAndRouteStateAndComponentToComponent = dart.constFn(dart_rti.findType("jaspr__src__framework__framework|Component(jaspr__src__framework__framework|BuildContext,jaspr_router__src__state|RouteState,jaspr__src__framework__framework|Component)")))(),
    MatchToString: () => (T.MatchToString = dart.constFn(dart_rti.findType("core|String(core|Match)")))(),
    RegExpMatchN: () => (T.RegExpMatchN = dart.constFn(dart_rti.findType("core|RegExpMatch?")))(),
    PlatformRouter: () => (T.PlatformRouter = dart.constFn(dart_rti.findType("jaspr_router__src__platform__platform|PlatformRouter")))(),
    HistoryManager: () => (T.HistoryManager = dart.constFn(dart_rti.findType("jaspr_router__src__platform__platform|HistoryManager")))(),
    RouteRegistry: () => (T.RouteRegistry = dart.constFn(dart_rti.findType("jaspr_router__src__platform__platform|RouteRegistry")))(),
    PopStateEventTovoid: () => (T.PopStateEventTovoid = dart.constFn(dart_rti.findType("~(html|PopStateEvent)")))(),
    AppBinding__Tovoid: () => (T.AppBinding__Tovoid = dart.constFn(dart_rti.findType("~(jaspr__src__foundation__binding|AppBinding{onChangeState:~(core|Object?{url:core|String?})?})")))(),
    String__Tovoid$2: () => (T.String__Tovoid$2 = dart.constFn(dart_rti.findType("~(core|String{data:core|Object?,title:core|String?})")))(),
    ListOfRouteBaseTovoid: () => (T.ListOfRouteBaseTovoid = dart.constFn(dart_rti.findType("~(core|List<jaspr_router__src__route|RouteBase>)")))(),
    BuildContextAndRouteMatchListAndRouteConfiguration__ToFutureOrOfRouteMatchList: () => (T.BuildContextAndRouteMatchListAndRouteConfiguration__ToFutureOrOfRouteMatchList = dart.constFn(dart_rti.findType("jaspr_router__src__matching|RouteMatchList/(jaspr__src__framework__framework|BuildContext,jaspr_router__src__matching|RouteMatchList,jaspr_router__src__configuration|RouteConfiguration,jaspr_router__src__matching|RouteMatcher{extra:core|Object?,redirectHistory:core|List<jaspr_router__src__matching|RouteMatchList>?})")))(),
    RouteMatch: () => (T.RouteMatch = dart.constFn(dart_rti.findType("jaspr_router__src__match|RouteMatch")))(),
    MatcherError: () => (T.MatcherError = dart.constFn(dart_rti.findType("jaspr_router__src__matching|MatcherError")))(),
    StringAndBuildContext__ToFutureOfRouteMatchList: () => (T.StringAndBuildContext__ToFutureOfRouteMatchList = dart.constFn(dart_rti.findType("async|Future<jaspr_router__src__matching|RouteMatchList>(core|String,jaspr__src__framework__framework|BuildContext{extra:core|Object?})")))(),
    RouteMatcher: () => (T.RouteMatcher = dart.constFn(dart_rti.findType("jaspr_router__src__matching|RouteMatcher")))(),
    RouteMatchListToString: () => (T.RouteMatchListToString = dart.constFn(dart_rti.findType("core|String(jaspr_router__src__matching|RouteMatchList)")))(),
    ListOfRouteMatchList: () => (T.ListOfRouteMatchList = dart.constFn(dart_rti.findType("core|List<jaspr_router__src__matching|RouteMatchList>")))(),
    Uri: () => (T.Uri = dart.constFn(dart_rti.findType("core|Uri")))(),
    StringNToFutureOrOfRouteMatchList: () => (T.StringNToFutureOrOfRouteMatchList = dart.constFn(dart_rti.findType("jaspr_router__src__matching|RouteMatchList/(core|String?)")))(),
    StringNToFutureOrOfStringN: () => (T.StringNToFutureOrOfStringN = dart.constFn(dart_rti.findType("core|String?/(core|String?)")))(),
    RedirectionError: () => (T.RedirectionError = dart.constFn(dart_rti.findType("jaspr_router__src__redirection|RedirectionError")))(),
    String__ToRouteMatchList: () => (T.String__ToRouteMatchList = dart.constFn(dart_rti.findType("jaspr_router__src__matching|RouteMatchList(core|String{extra:core|Object?})")))(),
    UriAndObjectNAndMapOfString$StringToListOfRouteMatch: () => (T.UriAndObjectNAndMapOfString$StringToListOfRouteMatch = dart.constFn(dart_rti.findType("core|List<jaspr_router__src__match|RouteMatch>(core|Uri,core|Object?,core|Map<core|String,core|String>)")))(),
    StringNAndRouteMatchToStringN: () => (T.StringNAndRouteMatchToStringN = dart.constFn(dart_rti.findType("core|String?(core|String?,jaspr_router__src__match|RouteMatch)")))(),
    IterableOfRouteMatchToString: () => (T.IterableOfRouteMatchToString = dart.constFn(dart_rti.findType("core|String(core|Iterable<jaspr_router__src__match|RouteMatch>)")))(),
    ListOfRouteMatch: () => (T.ListOfRouteMatch = dart.constFn(dart_rti.findType("core|List<jaspr_router__src__match|RouteMatch>")))(),
    BuildContextAndRouteStateToNever: () => (T.BuildContextAndRouteStateToNever = dart.constFn(dart_rti.findType("0&(jaspr__src__framework__framework|BuildContext,jaspr_router__src__state|RouteState)")))(),
    __ToRouteMatchN: () => (T.__ToRouteMatchN = dart.constFn(dart_rti.findType("jaspr_router__src__match|RouteMatch?({extra!core|Object?,parentSubloc!core|String,pathParameters!core|Map<core|String,core|String>,restLoc!core|String,route!jaspr_router__src__route|RouteBase})")))(),
    _RouteBuilderError: () => (T._RouteBuilderError = dart.constFn(dart_rti.findType("jaspr_router__src__builder|_RouteBuilderError")))(),
    BuildContextToComponent: () => (T.BuildContextToComponent = dart.constFn(dart_rti.findType("jaspr__src__framework__framework|Component(jaspr__src__framework__framework|BuildContext)")))(),
    LazyRoute: () => (T.LazyRoute = dart.constFn(dart_rti.findType("jaspr_router__src__route|LazyRoute")))(),
    BuildContextAndAsyncSnapshotToIterableOfComponent: () => (T.BuildContextAndAsyncSnapshotToIterableOfComponent = dart.constFn(dart_rti.findType("core|Iterable<jaspr__src__framework__framework|Component>(jaspr__src__framework__framework|BuildContext,jaspr__src__components__async|AsyncSnapshot<@>)")))(),
    LazyShellRoute: () => (T.LazyShellRoute = dart.constFn(dart_rti.findType("jaspr_router__src__route|LazyShellRoute")))(),
    RouterStateToIterableOfComponent: () => (T.RouterStateToIterableOfComponent = dart.constFn(dart_rti.findType("core|Iterable<jaspr__src__framework__framework|Component>(jaspr_router__src__router|RouterState)")))(),
    RouteMatchListAndMapOfObject$RouteLoaderToComponent: () => (T.RouteMatchListAndMapOfObject$RouteLoaderToComponent = dart.constFn(dart_rti.findType("jaspr__src__framework__framework|Component(jaspr_router__src__matching|RouteMatchList,core|Map<core|Object,jaspr_router__src__router|RouteLoader>)")))(),
    RouteMatchListAndintAndMapOfObject$RouteLoaderToComponent: () => (T.RouteMatchListAndintAndMapOfObject$RouteLoaderToComponent = dart.constFn(dart_rti.findType("jaspr__src__framework__framework|Component(jaspr_router__src__matching|RouteMatchList,core|int,core|Map<core|Object,jaspr_router__src__router|RouteLoader>)")))(),
    RouteMatchListAndRouteMatchToRouteState: () => (T.RouteMatchListAndRouteMatchToRouteState = dart.constFn(dart_rti.findType("jaspr_router__src__state|RouteState(jaspr_router__src__matching|RouteMatchList,jaspr_router__src__match|RouteMatch)")))(),
    RouteStateAndRouteAndMapOfObject$RouteLoaderToComponent: () => (T.RouteStateAndRouteAndMapOfObject$RouteLoaderToComponent = dart.constFn(dart_rti.findType("jaspr__src__framework__framework|Component(jaspr_router__src__state|RouteState,jaspr_router__src__route|Route,core|Map<core|Object,jaspr_router__src__router|RouteLoader>)")))(),
    RouteStateAndShellRouteAndMapOfObject$RouteLoader__ToComponent: () => (T.RouteStateAndShellRouteAndMapOfObject$RouteLoader__ToComponent = dart.constFn(dart_rti.findType("jaspr__src__framework__framework|Component(jaspr_router__src__state|RouteState,jaspr_router__src__route|ShellRoute,core|Map<core|Object,jaspr_router__src__router|RouteLoader>{child!jaspr__src__framework__framework|Component})")))(),
    _RouteBuilderErrorAndUriToComponent: () => (T._RouteBuilderErrorAndUriToComponent = dart.constFn(dart_rti.findType("jaspr__src__framework__framework|Component(jaspr_router__src__builder|_RouteBuilderError,core|Uri)")))(),
    EventTovoid: () => (T.EventTovoid = dart.constFn(dart_rti.findType("~(html|Event)")))(),
    ListOfComponent: () => (T.ListOfComponent = dart.constFn(dart_rti.findType("core|List<jaspr__src__framework__framework|Component>")))(),
    StylesN: () => (T.StylesN = dart.constFn(dart_rti.findType("jaspr__src__foundation__styles__styles|Styles?")))(),
    MapNOfString$String: () => (T.MapNOfString$String = dart.constFn(dart_rti.findType("core|Map<core|String,core|String>?")))()
  };
  var G = {
    JSArrayOfComponent: () => (G.JSArrayOfComponent = dart.constFn(_interceptors.JSArray$(T.Component())))(),
    LinkedMapOfObject$RouteLoader: () => (G.LinkedMapOfObject$RouteLoader = dart.constFn(_js_helper.LinkedMap$(T.Object(), T.RouteLoader())))(),
    JSArrayOfRouteLoader: () => (G.JSArrayOfRouteLoader = dart.constFn(_interceptors.JSArray$(T.RouteLoader())))(),
    SynchronousFutureOfvoid: () => (G.SynchronousFutureOfvoid = dart.constFn(synchronous_future.SynchronousFuture$(T.void())))(),
    IdentityMapOfString$String: () => (G.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(T.String(), T.String())))(),
    IdentityMapOfString$Route: () => (G.IdentityMapOfString$Route = dart.constFn(_js_helper.IdentityMap$(T.String(), T.Route())))(),
    JSArrayOfString: () => (G.JSArrayOfString = dart.constFn(_interceptors.JSArray$(T.String())))(),
    JSArrayOfRouteMatch: () => (G.JSArrayOfRouteMatch = dart.constFn(_interceptors.JSArray$(T.RouteMatch())))(),
    SynchronousFutureOfRouteMatchList: () => (G.SynchronousFutureOfRouteMatchList = dart.constFn(synchronous_future.SynchronousFuture$(T.RouteMatchList())))(),
    ListOfString: () => (G.ListOfString = dart.constFn(core.List$(T.String())))(),
    JSArrayOfRouteMatchList: () => (G.JSArrayOfRouteMatchList = dart.constFn(_interceptors.JSArray$(T.RouteMatchList())))(),
    ListOfRouteMatchList: () => (G.ListOfRouteMatchList = dart.constFn(core.List$(T.RouteMatchList())))(),
    LinkedHashMapOfString$String: () => (G.LinkedHashMapOfString$String = dart.constFn(collection.LinkedHashMap$(T.String(), T.String())))(),
    IdentityMapOfString$EventTovoid: () => (G.IdentityMapOfString$EventTovoid = dart.constFn(_js_helper.IdentityMap$(T.String(), T.EventTovoid())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constMap(T.String(), T.String(), []);
    },
    get C1() {
      return C[1] = dart.constMap(T.String(), T.dynamic(), []);
    },
    get C2() {
      return C[2] = dart.constMap(T.String(), T.ListOfString(), []);
    },
    get C3() {
      return C[3] = dart.constList([], T.RouteBase());
    },
    get C4() {
      return C[4] = dart.fn(redirection.redirect, T.BuildContextAndRouteMatchListAndRouteConfiguration__ToFutureOrOfRouteMatchList());
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "package:jaspr_router/src/misc/error_screen.dart",
    "dart:core",
    "package:jaspr_router/src/router.dart",
    "package:jaspr_router/src/configuration.dart",
    "package:jaspr_router/src/parser.dart",
    "package:jaspr_router/src/builder.dart",
    "org-dartlang-app:///packages/jaspr_router/src/router.dart",
    "package:jaspr_router/src/matching.dart",
    "dart:async",
    "org-dartlang-app:///packages/jaspr_router/src/configuration.dart",
    "package:jaspr_router/src/state.dart",
    "package:jaspr_router/src/misc/inherited_router.dart",
    "package:jaspr_router/src/route.dart",
    "org-dartlang-app:///packages/jaspr_router/src/route.dart",
    "org-dartlang-app:///packages/jaspr_router/src/path_utils.dart",
    "package:jaspr_router/src/misc/errors.dart",
    "package:jaspr_router/src/platform/platform.dart",
    "package:jaspr_router/src/platform/platform_web.dart",
    "package:jaspr_router/src/redirection.dart",
    "org-dartlang-app:///packages/jaspr_router/src/redirection.dart",
    "org-dartlang-app:///packages/jaspr_router/src/matching.dart",
    "org-dartlang-app:///packages/jaspr_router/src/match.dart",
    "package:jaspr_router/src/match.dart",
    "package:jaspr_router/src/link.dart",
    "package:jaspr/src/foundation/styles/styles.dart"
  ];
  var error$ = dart.privateName(error_screen, "ErrorScreen.error");
  error_screen.ErrorScreen = class ErrorScreen extends framework.StatelessComponent {
    get error() {
      return this[error$];
    }
    set error(value) {
      super.error = value;
    }
    static ['_#new#tearOff'](error, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new error_screen.ErrorScreen.new(error, {key: key});
    }
    build(context) {
      return new (T.SyncIterableOfComponent()).new((function* build() {
        let t$360, t$360$;
        yield html$.div(G.JSArrayOfComponent().of([html$.text("Page Not Found"), html$.br(), html$.text((t$360$ = (t$360 = this.error, t$360 == null ? null : dart.toString(t$360)), t$360$ == null ? "page not found" : t$360$))]));
      }).bind(this));
    }
  };
  (error_screen.ErrorScreen.new = function(error, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    this[error$] = error;
    dart.global.Object.getPrototypeOf(error_screen.ErrorScreen).new.call(this, {key: key});
    ;
  }).prototype = error_screen.ErrorScreen.prototype;
  dart.addTypeTests(error_screen.ErrorScreen);
  dart.addRtiResources(error_screen.ErrorScreen, ["jaspr_router__src__misc__error_screen|ErrorScreen"]);
  dart.addTypeCaches(error_screen.ErrorScreen);
  dart.setMethodSignature(error_screen.ErrorScreen, () => dart.global.Object.setPrototypeOf({build: T.BuildContextToIterableOfComponent()}, dart.getMethods(dart.global.Object.getPrototypeOf(error_screen.ErrorScreen))));
  dart.setLibraryUri(error_screen.ErrorScreen, I[0]);
  dart.setFieldSignature(error_screen.ErrorScreen, () => dart.global.Object.setPrototypeOf({error: {type: T.ExceptionN(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(error_screen.ErrorScreen))));
  extensions['GoRouterHelper|push'] = function GoRouterHelper$124push($this, location, opts) {
    let extra = opts && 'extra' in opts ? opts.extra : null;
    return router$.Router.of($this).push(location, {extra: extra});
  };
  extensions['GoRouterHelper|get#push'] = function GoRouterHelper$124get$35push($this) {
    return dart.fn((location, opts) => {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return extensions['GoRouterHelper|push']($this, location, {extra: extra});
    }, T.String__ToFutureOfvoid());
  };
  extensions['GoRouterHelper|pushNamed'] = function GoRouterHelper$124pushNamed($this, name, opts) {
    let params = opts && 'params' in opts ? opts.params : C[0] || CT.C0;
    let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[1] || CT.C1;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    return router$.Router.of($this).pushNamed(name, {params: params, queryParams: queryParams, extra: extra});
  };
  extensions['GoRouterHelper|get#pushNamed'] = function GoRouterHelper$124get$35pushNamed($this) {
    return dart.fn((name, opts) => {
      let params = opts && 'params' in opts ? opts.params : C[0] || CT.C0;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[1] || CT.C1;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return extensions['GoRouterHelper|pushNamed']($this, name, {params: params, queryParams: queryParams, extra: extra});
    }, T.String__ToFutureOfvoid$1());
  };
  extensions['GoRouterHelper|back'] = function GoRouterHelper$124back($this) {
    return router$.Router.of($this).back();
  };
  extensions['GoRouterHelper|get#back'] = function GoRouterHelper$124get$35back($this) {
    return dart.fn(() => extensions['GoRouterHelper|back']($this), T.VoidTovoid());
  };
  extensions['GoRouterHelper|replace'] = function GoRouterHelper$124replace($this, location, opts) {
    let extra = opts && 'extra' in opts ? opts.extra : null;
    return router$.Router.of($this).replace(location, {extra: extra});
  };
  extensions['GoRouterHelper|get#replace'] = function GoRouterHelper$124get$35replace($this) {
    return dart.fn((location, opts) => {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return extensions['GoRouterHelper|replace']($this, location, {extra: extra});
    }, T.String__Tovoid());
  };
  extensions['GoRouterHelper|replaceNamed'] = function GoRouterHelper$124replaceNamed($this, name, opts) {
    let params = opts && 'params' in opts ? opts.params : C[0] || CT.C0;
    let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[1] || CT.C1;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    return router$.Router.of($this).replaceNamed(name, {extra: extra});
  };
  extensions['GoRouterHelper|get#replaceNamed'] = function GoRouterHelper$124get$35replaceNamed($this) {
    return dart.fn((name, opts) => {
      let params = opts && 'params' in opts ? opts.params : C[0] || CT.C0;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[1] || CT.C1;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return extensions['GoRouterHelper|replaceNamed']($this, name, {params: params, queryParams: queryParams, extra: extra});
    }, T.String__Tovoid$1());
  };
  var routes$ = dart.privateName(router$, "Router.routes");
  var errorBuilder$ = dart.privateName(router$, "Router.errorBuilder");
  var redirect$ = dart.privateName(router$, "Router.redirect");
  var redirectLimit$ = dart.privateName(router$, "Router.redirectLimit");
  var __Router__configuration = dart.privateName(router$, "_#Router#_configuration");
  var __Router__parser = dart.privateName(router$, "_#Router#_parser");
  var __Router__builder = dart.privateName(router$, "_#Router#_builder");
  var _configuration = dart.privateName(router$, "_configuration");
  var _parser = dart.privateName(router$, "_parser");
  var _builder = dart.privateName(router$, "_builder");
  var _is = dart.privateName(dart_rti, "_is");
  var _as = dart.privateName(dart_rti, "_as");
  router$.Router = class Router extends framework.StatefulComponent {
    get routes() {
      return this[routes$];
    }
    set routes(value) {
      super.routes = value;
    }
    get errorBuilder() {
      return this[errorBuilder$];
    }
    set errorBuilder(value) {
      super.errorBuilder = value;
    }
    get redirect() {
      return this[redirect$];
    }
    set redirect(value) {
      super.redirect = value;
    }
    get redirectLimit() {
      return this[redirectLimit$];
    }
    set redirectLimit(value) {
      super.redirectLimit = value;
    }
    static ['_#new#tearOff'](opts) {
      let routes = opts && 'routes' in opts ? opts.routes : null;
      let errorBuilder = opts && 'errorBuilder' in opts ? opts.errorBuilder : null;
      let redirect = opts && 'redirect' in opts ? opts.redirect : null;
      let redirectLimit = opts && 'redirectLimit' in opts ? opts.redirectLimit : 5;
      return new router$.Router.new({routes: routes, errorBuilder: errorBuilder, redirect: redirect, redirectLimit: redirectLimit});
    }
    get [_configuration]() {
      let t$3610;
      t$3610 = this[__Router__configuration];
      return t$3610 == null ? dart.throw(new _internal.LateError.fieldNI("_configuration")) : t$3610;
    }
    set [_configuration](_configuration$35param) {
      if (this[__Router__configuration] == null)
        this[__Router__configuration] = _configuration$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_configuration"));
    }
    get [_parser]() {
      let t$3610;
      t$3610 = this[__Router__parser];
      return t$3610 == null ? dart.throw(new _internal.LateError.fieldNI("_parser")) : t$3610;
    }
    set [_parser](_parser$35param) {
      if (this[__Router__parser] == null)
        this[__Router__parser] = _parser$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_parser"));
    }
    get [_builder]() {
      let t$3610;
      t$3610 = this[__Router__builder];
      return t$3610 == null ? dart.throw(new _internal.LateError.fieldNI("_builder")) : t$3610;
    }
    set [_builder](_builder$35param) {
      if (this[__Router__builder] == null)
        this[__Router__builder] = _builder$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_builder"));
    }
    createState() {
      return new router$.RouterState.new();
    }
    static of(context) {
      return dart.nullCheck(router$.Router.maybeOf(context));
    }
    static maybeOf(context) {
      let t$3610;
      if (T.StatefulElement()[_is](context) && T.RouterState()[_is](context.state)) {
        return T.RouterState()[_as](context.state);
      }
      t$3610 = context.dependOnInheritedComponentOfExactType(T.InheritedRouter());
      return t$3610 == null ? null : t$3610.router;
    }
  };
  (router$.Router.new = function(opts) {
    let t$3610;
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let errorBuilder = opts && 'errorBuilder' in opts ? opts.errorBuilder : null;
    let redirect = opts && 'redirect' in opts ? opts.redirect : null;
    let redirectLimit = opts && 'redirectLimit' in opts ? opts.redirectLimit : 5;
    this[__Router__configuration] = null;
    this[__Router__parser] = null;
    this[__Router__builder] = null;
    this[routes$] = routes;
    this[errorBuilder$] = errorBuilder;
    this[redirect$] = redirect;
    this[redirectLimit$] = redirectLimit;
    dart.global.Object.getPrototypeOf(router$.Router).new.call(this);
    this[_configuration] = new configuration.RouteConfiguration.new({routes: this.routes, redirectLimit: this.redirectLimit, topRedirect: (t$3610 = this.redirect, t$3610 == null ? dart.fn((_, __) => null, T.BuildContextAndRouteStateToNull()) : t$3610)});
    this[_parser] = new parser.RouteInformationParser.new({configuration: this[_configuration]});
    this[_builder] = new builder$.RouteBuilder.new({configuration: this[_configuration], errorBuilder: this.errorBuilder});
  }).prototype = router$.Router.prototype;
  dart.addTypeTests(router$.Router);
  dart.addRtiResources(router$.Router, ["jaspr_router__src__router|Router"]);
  dart.addTypeCaches(router$.Router);
  dart.setMethodSignature(router$.Router, () => dart.global.Object.setPrototypeOf({createState: T.VoidToStateOfStatefulComponent()}, dart.getMethods(dart.global.Object.getPrototypeOf(router$.Router))));
  dart.setStaticMethodSignature(router$.Router, () => ['of', 'maybeOf']);
  dart.setGetterSignature(router$.Router, () => dart.global.Object.setPrototypeOf({
    [_configuration]: T.RouteConfiguration(),
    [_parser]: T.RouteInformationParser(),
    [_builder]: T.RouteBuilder()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(router$.Router))));
  dart.setSetterSignature(router$.Router, () => dart.global.Object.setPrototypeOf({
    [_configuration]: T.RouteConfiguration(),
    [_parser]: T.RouteInformationParser(),
    [_builder]: T.RouteBuilder()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(router$.Router))));
  dart.setLibraryUri(router$.Router, I[2]);
  dart.setFieldSignature(router$.Router, () => dart.global.Object.setPrototypeOf({
    routes: {type: T.ListOfRouteBase(), isConst: false, isFinal: true, libraryUri: I[1]},
    errorBuilder: {type: T.BuildContextAndRouteStateToNComponent(), isConst: false, isFinal: true},
    redirect: {type: T.BuildContextAndRouteStateToNFutureOrOfStringN(), isConst: false, isFinal: true},
    redirectLimit: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]},
    [__Router__configuration]: {type: T.RouteConfigurationN(), isConst: false, isFinal: false, libraryUri: I[3]},
    [__Router__parser]: {type: T.RouteInformationParserN(), isConst: false, isFinal: false, libraryUri: I[4]},
    [__Router__builder]: {type: T.RouteBuilderN(), isConst: false, isFinal: false, libraryUri: I[5]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(router$.Router))));
  var routeLoaders = dart.privateName(router$, "RouterState.routeLoaders");
  var _matchList = dart.privateName(router$, "_matchList");
  var _update = dart.privateName(router$, "_update");
  var _matchRoute = dart.privateName(router$, "_matchRoute");
  var _preload = dart.privateName(router$, "_preload");
  const State_PreloadStateMixin$36 = class State_PreloadStateMixin extends framework.State$(dart_rti.findType("jaspr_router__src__router|Router")) {};
  (State_PreloadStateMixin$36.new = function() {
    dart.global.Object.getPrototypeOf(State_PreloadStateMixin$36).new.call(this);
  }).prototype = State_PreloadStateMixin$36.prototype;
  dart.applyMixin(State_PreloadStateMixin$36, framework.PreloadStateMixin$(dart_rti.findType("jaspr_router__src__router|Router")));
  router$.RouterState = class RouterState extends State_PreloadStateMixin$36 {
    get routeLoaders() {
      return this[routeLoaders];
    }
    set routeLoaders(value) {
      this[routeLoaders] = value;
    }
    get matchList() {
      let t$3610;
      t$3610 = this[_matchList];
      return t$3610 == null ? matching.RouteMatchList.empty : t$3610;
    }
    preloadState() {
      return this.initRoutes();
    }
    initState() {
      super.initState();
      ;
      platform.PlatformRouter.instance.history.init(this.context.binding, {onChangeState: dart.fn((state, opts) => {
          let t$3610;
          let url = opts && 'url' in opts ? opts.url : null;
          this[_update]((t$3610 = url, t$3610 == null ? dart.toString(this.context.binding.currentUri) : t$3610), {extra: state, updateHistory: false, replace: true});
        }, T.ObjectN__Tovoid())});
      if (this[_matchList] == null) {
        if (!this.context.binding.isClient) dart.assertFailed(null, I[6], 83, 14, "context.binding.isClient");
        this.initRoutes().then(T.Null(), dart.fn(_ => {
          this.setState(dart.fn(() => {
          }, T.VoidTovoid()));
        }, T.voidToNull()));
      }
    }
    didUpdateComponent(oldComponent) {
      T.Router()[_as](oldComponent);
      super.didUpdateComponent(oldComponent);
      if (dart.equals(this.component, oldComponent)) return;
      this.initRoutes();
    }
    initRoutes() {
      let location = dart.toString(this.context.binding.currentUri);
      return this[_matchRoute](location).then(T.RouteMatchList(), dart.bind(this, _preload)).then(T.void(), dart.fn(match => {
        this[_matchList] = match;
        if (dart.toString(match.uri) !== location) {
          platform.PlatformRouter.instance.history.replace(dart.toString(match.uri), {title: match.title});
        }
      }, T.RouteMatchListToNull()));
    }
    preload(location) {
      return this[_matchRoute](location).then(T.void(), dart.bind(this, _preload));
    }
    [_preload](match) {
      let t$3613, t$3612, t$3611, t$3610;
      let loaders = G.JSArrayOfRouteLoader().of([]);
      for (let i = 0; i < match.matches[$length]; i = i + 1) {
        let m = match.matches[$_get](i);
        let r = m.route;
        let hasNext = i < match.matches[$length] - 1;
        if (T.LazyRouteMixin()[_is](r) && (!hasNext || T.ShellRoute()[_is](r))) {
          let key = m.subloc;
          let l = (t$3610 = this.routeLoaders, t$3611 = key, t$3612 = t$3610[$_get](t$3611), t$3612 == null ? (t$3613 = new router$.RouteLoader.from(T.LazyRouteMixin()[_as](r).load()), t$3610[$_set](t$3611, t$3613), t$3613) : t$3612);
          loaders[$add](l);
        }
      }
      return router$.RouteLoader.wait(loaders).then(T.RouteMatchList(), dart.fn(_ => match, T.voidToRouteMatchList()));
    }
    namedLocation(name, opts) {
      let params = opts && 'params' in opts ? opts.params : C[0] || CT.C0;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[1] || CT.C1;
      return this.component[_configuration].namedLocation(name, {params: params, queryParams: queryParams});
    }
    push(location, opts) {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return this[_update](location, {extra: extra});
    }
    pushNamed(name, opts) {
      let params = opts && 'params' in opts ? opts.params : C[0] || CT.C0;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[1] || CT.C1;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return this.push(this.namedLocation(name, {params: params, queryParams: queryParams}), {extra: extra});
    }
    replace(location, opts) {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return this[_update](location, {extra: extra, replace: true});
    }
    replaceNamed(name, opts) {
      let params = opts && 'params' in opts ? opts.params : C[0] || CT.C0;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[1] || CT.C1;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return this.replace(this.namedLocation(name, {params: params, queryParams: queryParams}), {extra: extra});
    }
    back() {
      platform.PlatformRouter.instance.history.back();
    }
    [_update](location, opts) {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let updateHistory = opts && 'updateHistory' in opts ? opts.updateHistory : true;
      let replace = opts && 'replace' in opts ? opts.replace : false;
      return this[_matchRoute](location, {extra: extra}).then(T.void(), dart.fn(match => {
        this.setState(dart.fn(() => {
          this[_matchList] = match;
          if (updateHistory || location !== dart.toString(match.uri)) {
            if (!replace) {
              platform.PlatformRouter.instance.history.push(dart.toString(match.uri), {title: match.title, data: match.extra});
            } else {
              platform.PlatformRouter.instance.history.replace(dart.toString(match.uri), {title: match.title, data: match.extra});
            }
          }
        }, T.VoidTovoid()));
      }, T.RouteMatchListToNull()));
    }
    [_matchRoute](location, opts) {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      return this.component[_parser].parseRouteInformation(location, this.context, {extra: extra});
    }
    build(context) {
      return new (T.SyncIterableOfComponent()).new((function* build() {
        yield* this.component[_builder].build(this);
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new router$.RouterState.new();
    }
  };
  (router$.RouterState.new = function() {
    this[_matchList] = null;
    this[routeLoaders] = new (G.LinkedMapOfObject$RouteLoader()).new();
    this.$ti = this.$ti || T.RouterState();
    dart.global.Object.getPrototypeOf(router$.RouterState).new.call(this);
    ;
  }).prototype = router$.RouterState.prototype;
  dart.addTypeTests(router$.RouterState);
  dart.addRtiResources(router$.RouterState, ["jaspr_router__src__router|RouterState"]);
  dart.addTypeCaches(router$.RouterState);
  dart.setMethodSignature(router$.RouterState, () => dart.global.Object.setPrototypeOf({
    preloadState: T.VoidToFutureOfvoid(),
    initRoutes: T.VoidToFutureOfvoid(),
    preload: T.StringToFutureOfvoid(),
    [_preload]: T.RouteMatchListToFutureOfRouteMatchList(),
    namedLocation: T.String__ToString(),
    push: T.String__ToFutureOfvoid(),
    pushNamed: T.String__ToFutureOfvoid$1(),
    replace: T.String__ToFutureOfvoid(),
    replaceNamed: T.String__ToFutureOfvoid$1(),
    back: T.VoidTovoid(),
    [_update]: T.String__ToFutureOfvoid$2(),
    [_matchRoute]: T.String__ToFutureOfRouteMatchList(),
    build: T.BuildContextToIterableOfComponent()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(router$.RouterState))));
  dart.setGetterSignature(router$.RouterState, () => dart.global.Object.setPrototypeOf({matchList: T.RouteMatchList()}, dart.getGetters(dart.global.Object.getPrototypeOf(router$.RouterState))));
  dart.setLibraryUri(router$.RouterState, I[2]);
  dart.setFieldSignature(router$.RouterState, () => dart.global.Object.setPrototypeOf({
    [_matchList]: {type: T.RouteMatchListN(), isConst: false, isFinal: false, libraryUri: I[7]},
    routeLoaders: {type: T.MapOfObject$RouteLoader(), isConst: false, isFinal: false, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(router$.RouterState))));
  var future$ = dart.privateName(router$, "RouteLoader.future");
  var isPending = dart.privateName(router$, "RouteLoader.isPending");
  router$.RouteLoader = class RouteLoader extends core.Object {
    get future() {
      return this[future$];
    }
    set future(value) {
      super.future = value;
    }
    get isPending() {
      return this[isPending];
    }
    set isPending(value) {
      this[isPending] = value;
    }
    static ['_#from#tearOff'](future) {
      return new router$.RouteLoader.from(future);
    }
    static wait(loaders) {
      let l = loaders[$where](dart.fn(l => l.isPending, T.RouteLoaderTobool()))[$map](T.Future(), dart.fn(l => l.future, T.RouteLoaderToFuture()));
      if (l[$isNotEmpty]) {
        return async.Future.wait(T.dynamic(), l);
      } else {
        return new (G.SynchronousFutureOfvoid()).new(null);
      }
    }
  };
  (router$.RouteLoader.from = function(future) {
    this[future$] = future;
    this[isPending] = true;
    this.future.whenComplete(dart.fn(() => {
      this.isPending = false;
    }, T.VoidToNull()));
  }).prototype = router$.RouteLoader.prototype;
  dart.addTypeTests(router$.RouteLoader);
  dart.addRtiResources(router$.RouteLoader, ["jaspr_router__src__router|RouteLoader"]);
  dart.addTypeCaches(router$.RouteLoader);
  dart.setStaticMethodSignature(router$.RouteLoader, () => ['wait']);
  dart.setLibraryUri(router$.RouteLoader, I[2]);
  dart.setFieldSignature(router$.RouteLoader, () => dart.global.Object.setPrototypeOf({
    future: {type: T.Future(), isConst: false, isFinal: true, libraryUri: I[8]},
    isPending: {type: T.bool(), isConst: false, isFinal: false, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(router$.RouteLoader))));
  var routes$0 = dart.privateName(configuration, "RouteConfiguration.routes");
  var redirectLimit$0 = dart.privateName(configuration, "RouteConfiguration.redirectLimit");
  var topRedirect$ = dart.privateName(configuration, "RouteConfiguration.topRedirect");
  var _nameToPath = dart.privateName(configuration, "_nameToPath");
  var _cacheNameToPath = dart.privateName(configuration, "_cacheNameToPath");
  var _debugFullPathsFor = dart.privateName(configuration, "_debugFullPathsFor");
  configuration.RouteConfiguration = class RouteConfiguration extends core.Object {
    get routes() {
      return this[routes$0];
    }
    set routes(value) {
      super.routes = value;
    }
    get redirectLimit() {
      return this[redirectLimit$0];
    }
    set redirectLimit(value) {
      super.redirectLimit = value;
    }
    get topRedirect() {
      return this[topRedirect$];
    }
    set topRedirect(value) {
      super.topRedirect = value;
    }
    static ['_#new#tearOff'](opts) {
      let routes = opts && 'routes' in opts ? opts.routes : null;
      let redirectLimit = opts && 'redirectLimit' in opts ? opts.redirectLimit : null;
      let topRedirect = opts && 'topRedirect' in opts ? opts.topRedirect : null;
      return new configuration.RouteConfiguration.new({routes: routes, redirectLimit: redirectLimit, topRedirect: topRedirect});
    }
    static _debugCheckPath(routes, isTopLevel) {
      for (let route of routes) {
        let t$36$35subRouteIsTopLevel = null;
        function t$36$35subRouteIsTopLevel$35get() {
          let t$3611;
          t$3611 = t$36$35subRouteIsTopLevel;
          return t$3611 == null ? dart.throw(new _internal.LateError.localNI("subRouteIsTopLevel")) : t$3611;
        }
        function t$36$35subRouteIsTopLevel$35set(subRouteIsTopLevel$35param) {
          return t$36$35subRouteIsTopLevel = subRouteIsTopLevel$35param;
        }
        if (T.Route()[_is](route)) {
          if (isTopLevel) {
            if (!route.path[$startsWith]("/")) dart.assertFailed("top-level path must start with \"/\": " + dart.str(route), I[9], 29, 18, "route.path.startsWith('/')");
          } else {
            if (!(!route.path[$startsWith]("/") && !route.path[$endsWith]("/"))) dart.assertFailed("sub-route path may not start or end with /: " + dart.str(route), I[9], 31, 18, "!route.path.startsWith('/') && !route.path.endsWith('/')");
          }
          t$36$35subRouteIsTopLevel$35set(false);
        } else if (T.ShellRoute()[_is](route)) {
          t$36$35subRouteIsTopLevel$35set(isTopLevel);
        }
        configuration.RouteConfiguration._debugCheckPath(route.routes, t$36$35subRouteIsTopLevel$35get());
      }
      return true;
    }
    static _debugVerifyNoDuplicatePathParameter(routes, usedPathParams) {
      for (let route of routes) {
        if (!T.Route()[_is](route)) {
          continue;
        }
        for (let pathParam of route.pathParams) {
          if (usedPathParams[$containsKey](pathParam)) {
            let sameRoute = dart.equals(usedPathParams[$_get](pathParam), route);
            dart.throw(new errors.RouterError.new("duplicate path parameter, '" + pathParam + "' found in " + (sameRoute ? dart.str(route) : dart.str(usedPathParams[$_get](pathParam)) + ", and " + dart.str(route))));
          }
          usedPathParams[$_set](pathParam, route);
        }
        configuration.RouteConfiguration._debugVerifyNoDuplicatePathParameter(route.routes, usedPathParams);
        route.pathParams[$forEach](dart.bind(usedPathParams, $remove));
      }
      return true;
    }
    namedLocation(name, opts) {
      let params = opts && 'params' in opts ? opts.params : C[0] || CT.C0;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[1] || CT.C1;
      if (!dart.fn(() => {
        developer.log("getting location for name: " + "\"" + name + "\"" + (params[$isEmpty] ? "" : ", params: " + dart.str(params)) + (queryParams[$isEmpty] ? "" : ", queryParams: " + dart.str(queryParams)));
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[9], 79, 12, "() {\n      log('getting location for name: '\n          '\"$name\"'\n          '${params.isEmpty ? '' : ', params: $params'}'\n          '${queryParams.isEmpty ? '' : ', queryParams: $queryParams'}');\n      return true;\n    }()");
      let keyName = name[$toLowerCase]();
      if (!this[_nameToPath][$containsKey](keyName)) dart.assertFailed("unknown route name: " + name, I[9], 87, 12, "_nameToPath.containsKey(keyName)");
      let path = dart.nullCheck(this[_nameToPath][$_get](keyName));
      if (!dart.fn(() => {
        let paramNames = G.JSArrayOfString().of([]);
        path_utils.patternToRegExp(path, paramNames);
        for (let paramName of paramNames) {
          if (!params[$containsKey](paramName)) dart.assertFailed("missing param \"" + paramName + "\" for " + path, I[9], 94, 16, "params.containsKey(paramName)");
        }
        for (let key of params[$keys]) {
          if (!paramNames[$contains](key)) dart.assertFailed("unknown param \"" + key + "\" for " + path, I[9], 99, 16, "paramNames.contains(key)");
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[9], 89, 12, "() {\n      // Check that all required params are present\n      final List<String> paramNames = <String>[];\n      patternToRegExp(path, paramNames);\n      for (final String paramName in paramNames) {\n        assert(params.containsKey(paramName), 'missing param \"$paramName\" for $path');\n      }\n\n      // Check that there are no extra params\n      for (final String key in params.keys) {\n        assert(paramNames.contains(key), 'unknown param \"$key\" for $path');\n      }\n      return true;\n    }()");
      let encodedParams = (() => {
        let t$3613 = new (G.IdentityMapOfString$String()).new();
        for (let param of params[$entries])
          t$3613[$_set](param.key, core.Uri.encodeComponent(param.value));
        return t$3613;
      })();
      let location = path_utils.patternToPath(path, encodedParams);
      return dart.toString(core._Uri.new({path: location, queryParameters: queryParams[$isEmpty] ? null : queryParams}));
    }
    toString() {
      return "RouterConfiguration: " + dart.str(this.routes);
    }
    debugKnownRoutes() {
      let sb = new core.StringBuffer.new();
      sb.writeln("Full paths for routes:");
      this[_debugFullPathsFor](this.routes, "", 0, sb);
      if (this[_nameToPath][$isNotEmpty]) {
        sb.writeln("known full paths for route names:");
        for (let e of this[_nameToPath][$entries]) {
          sb.writeln("  " + e.key + " => " + e.value);
        }
      }
      return dart.toString(sb);
    }
    [_debugFullPathsFor](routes, parentFullpath, depth, sb) {
      for (let route of routes) {
        if (T.Route()[_is](route)) {
          let fullpath = path_utils.concatenatePaths(parentFullpath, route.path);
          sb.writeln("  => " + ""[$padLeft](depth * 2) + fullpath);
          this[_debugFullPathsFor](route.routes, fullpath, depth + 1, sb);
        } else if (T.ShellRoute()[_is](route)) {
          this[_debugFullPathsFor](route.routes, parentFullpath, depth, sb);
        }
      }
    }
    [_cacheNameToPath](parentFullPath, childRoutes) {
      for (let route of childRoutes) {
        if (T.Route()[_is](route)) {
          let fullPath = path_utils.concatenatePaths(parentFullPath, route.path);
          if (route.name != null) {
            let name = dart.nullCheck(route.name)[$toLowerCase]();
            if (!!this[_nameToPath][$containsKey](name)) dart.assertFailed("duplication fullpaths for name " + "\"" + name + "\":" + dart.str(this[_nameToPath][$_get](name)) + ", " + fullPath, I[9], 155, 15, "!_nameToPath.containsKey(name)");
            this[_nameToPath][$_set](name, fullPath);
          }
          if (route.routes[$isNotEmpty]) {
            this[_cacheNameToPath](fullPath, route.routes);
          }
        } else if (T.ShellRoute()[_is](route)) {
          if (route.routes[$isNotEmpty]) {
            this[_cacheNameToPath](parentFullPath, route.routes);
          }
        }
      }
    }
  };
  (configuration.RouteConfiguration.new = function(opts) {
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let redirectLimit = opts && 'redirectLimit' in opts ? opts.redirectLimit : null;
    let topRedirect = opts && 'topRedirect' in opts ? opts.topRedirect : null;
    this[_nameToPath] = new (G.IdentityMapOfString$String()).new();
    this[routes$0] = routes;
    this[redirectLimit$0] = redirectLimit;
    this[topRedirect$] = topRedirect;
    if (!configuration.RouteConfiguration._debugCheckPath(routes, true)) dart.assertFailed(null, I[9], 19, 16, "_debugCheckPath(routes, true)");
    if (!configuration.RouteConfiguration._debugVerifyNoDuplicatePathParameter(routes, new (G.IdentityMapOfString$Route()).new())) dart.assertFailed(null, I[9], 20, 16, "_debugVerifyNoDuplicatePathParameter(routes, <String, Route>{})");
    this[_cacheNameToPath]("", this.routes);
  }).prototype = configuration.RouteConfiguration.prototype;
  dart.addTypeTests(configuration.RouteConfiguration);
  dart.addRtiResources(configuration.RouteConfiguration, ["jaspr_router__src__configuration|RouteConfiguration"]);
  dart.addTypeCaches(configuration.RouteConfiguration);
  dart.setMethodSignature(configuration.RouteConfiguration, () => dart.global.Object.setPrototypeOf({
    namedLocation: T.String__ToString(),
    debugKnownRoutes: T.VoidToString(),
    [_debugFullPathsFor]: T.ListOfRouteBaseAndStringAndint__Tovoid(),
    [_cacheNameToPath]: T.StringAndListOfRouteBaseTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(configuration.RouteConfiguration))));
  dart.setStaticMethodSignature(configuration.RouteConfiguration, () => ['_debugCheckPath', '_debugVerifyNoDuplicatePathParameter']);
  dart.setLibraryUri(configuration.RouteConfiguration, I[3]);
  dart.setFieldSignature(configuration.RouteConfiguration, () => dart.global.Object.setPrototypeOf({
    routes: {type: T.ListOfRouteBase(), isConst: false, isFinal: true, libraryUri: I[1]},
    redirectLimit: {type: T.int(), isConst: false, isFinal: true, libraryUri: I[1]},
    topRedirect: {type: T.BuildContextAndRouteStateToFutureOrOfStringN(), isConst: false, isFinal: true},
    [_nameToPath]: {type: T.MapOfString$String(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(configuration.RouteConfiguration))));
  dart.defineExtensionMethods(configuration.RouteConfiguration, ['toString']);
  var location$ = dart.privateName(state$, "RouteState.location");
  var subloc$ = dart.privateName(state$, "RouteState.subloc");
  var name$ = dart.privateName(state$, "RouteState.name");
  var path$ = dart.privateName(state$, "RouteState.path");
  var fullpath$ = dart.privateName(state$, "RouteState.fullpath");
  var params$ = dart.privateName(state$, "RouteState.params");
  var queryParams$ = dart.privateName(state$, "RouteState.queryParams");
  var queryParametersAll$ = dart.privateName(state$, "RouteState.queryParametersAll");
  var extra$ = dart.privateName(state$, "RouteState.extra");
  var error$0 = dart.privateName(state$, "RouteState.error");
  state$.RouteState = class RouteState extends core.Object {
    get location() {
      return this[location$];
    }
    set location(value) {
      super.location = value;
    }
    get subloc() {
      return this[subloc$];
    }
    set subloc(value) {
      super.subloc = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    get fullpath() {
      return this[fullpath$];
    }
    set fullpath(value) {
      super.fullpath = value;
    }
    get params() {
      return this[params$];
    }
    set params(value) {
      super.params = value;
    }
    get queryParams() {
      return this[queryParams$];
    }
    set queryParams(value) {
      super.queryParams = value;
    }
    get queryParametersAll() {
      return this[queryParametersAll$];
    }
    set queryParametersAll(value) {
      super.queryParametersAll = value;
    }
    get extra() {
      return this[extra$];
    }
    set extra(value) {
      super.extra = value;
    }
    get error() {
      return this[error$0];
    }
    set error(value) {
      super.error = value;
    }
    static ['_#new#tearOff'](opts) {
      let location = opts && 'location' in opts ? opts.location : null;
      let subloc = opts && 'subloc' in opts ? opts.subloc : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let path = opts && 'path' in opts ? opts.path : null;
      let fullpath = opts && 'fullpath' in opts ? opts.fullpath : null;
      let params = opts && 'params' in opts ? opts.params : C[0] || CT.C0;
      let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[0] || CT.C0;
      let queryParametersAll = opts && 'queryParametersAll' in opts ? opts.queryParametersAll : C[2] || CT.C2;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let error = opts && 'error' in opts ? opts.error : null;
      return new state$.RouteState.new({location: location, subloc: subloc, name: name, path: path, fullpath: fullpath, params: params, queryParams: queryParams, queryParametersAll: queryParametersAll, extra: extra, error: error});
    }
    _equals(other) {
      if (other == null) return false;
      return T.RouteState()[_is](other) && other.location === this.location && other.subloc === this.subloc && other.name == this.name && other.path == this.path && other.fullpath == this.fullpath && dart.equals(other.params, this.params) && dart.equals(other.queryParams, this.queryParams) && dart.equals(other.queryParametersAll, this.queryParametersAll) && dart.equals(other.extra, this.extra) && dart.equals(other.error, this.error);
    }
    get hashCode() {
      return core.Object.hash(this.location, this.subloc, this.name, this.path, this.fullpath, this.params, this.queryParams, this.queryParametersAll, this.extra, this.error);
    }
    static of(context) {
      return dart.nullCheck(state$.RouteState.maybeOf(context));
    }
    static maybeOf(context) {
      let t$3614;
      t$3614 = context.dependOnInheritedComponentOfExactType(T.InheritedRouteState());
      return t$3614 == null ? null : t$3614.state;
    }
  };
  (state$.RouteState.new = function(opts) {
    let location = opts && 'location' in opts ? opts.location : null;
    let subloc = opts && 'subloc' in opts ? opts.subloc : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let fullpath = opts && 'fullpath' in opts ? opts.fullpath : null;
    let params = opts && 'params' in opts ? opts.params : C[0] || CT.C0;
    let queryParams = opts && 'queryParams' in opts ? opts.queryParams : C[0] || CT.C0;
    let queryParametersAll = opts && 'queryParametersAll' in opts ? opts.queryParametersAll : C[2] || CT.C2;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let error = opts && 'error' in opts ? opts.error : null;
    this[location$] = location;
    this[subloc$] = subloc;
    this[name$] = name;
    this[path$] = path;
    this[fullpath$] = fullpath;
    this[params$] = params;
    this[queryParams$] = queryParams;
    this[queryParametersAll$] = queryParametersAll;
    this[extra$] = extra;
    this[error$0] = error;
    ;
  }).prototype = state$.RouteState.prototype;
  dart.addTypeTests(state$.RouteState);
  dart.addRtiResources(state$.RouteState, ["jaspr_router__src__state|RouteState"]);
  dart.addTypeCaches(state$.RouteState);
  dart.setStaticMethodSignature(state$.RouteState, () => ['of', 'maybeOf']);
  dart.setLibraryUri(state$.RouteState, I[10]);
  dart.setFieldSignature(state$.RouteState, () => dart.global.Object.setPrototypeOf({
    location: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    subloc: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    name: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    path: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    fullpath: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    params: {type: T.MapOfString$String(), isConst: false, isFinal: true, libraryUri: I[1]},
    queryParams: {type: T.MapOfString$String(), isConst: false, isFinal: true, libraryUri: I[1]},
    queryParametersAll: {type: T.MapOfString$ListOfString(), isConst: false, isFinal: true, libraryUri: I[1]},
    extra: {type: T.ObjectN(), isConst: false, isFinal: true, libraryUri: I[1]},
    error: {type: T.ExceptionN(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(state$.RouteState))));
  dart.defineExtensionMethods(state$.RouteState, ['_equals']);
  dart.defineExtensionAccessors(state$.RouteState, ['hashCode']);
  var router$0 = dart.privateName(inherited_router, "InheritedRouter.router");
  inherited_router.InheritedRouter = class InheritedRouter extends framework.InheritedComponent {
    get router() {
      return this[router$0];
    }
    set router(value) {
      super.router = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let router = opts && 'router' in opts ? opts.router : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return new inherited_router.InheritedRouter.new({child: child, router: router, key: key});
    }
    updateShouldNotify(oldComponent) {
      T.InheritedRouter()[_as](oldComponent);
      return true;
    }
  };
  (inherited_router.InheritedRouter.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let router = opts && 'router' in opts ? opts.router : null;
    let key = opts && 'key' in opts ? opts.key : null;
    this[router$0] = router;
    dart.global.Object.getPrototypeOf(inherited_router.InheritedRouter).new.call(this, {child: child, key: key});
    ;
  }).prototype = inherited_router.InheritedRouter.prototype;
  dart.addTypeTests(inherited_router.InheritedRouter);
  dart.addRtiResources(inherited_router.InheritedRouter, ["jaspr_router__src__misc__inherited_router|InheritedRouter"]);
  dart.addTypeCaches(inherited_router.InheritedRouter);
  dart.setMethodSignature(inherited_router.InheritedRouter, () => dart.global.Object.setPrototypeOf({updateShouldNotify: T.ObjectNTobool()}, dart.getMethods(dart.global.Object.getPrototypeOf(inherited_router.InheritedRouter))));
  dart.setLibraryUri(inherited_router.InheritedRouter, I[11]);
  dart.setFieldSignature(inherited_router.InheritedRouter, () => dart.global.Object.setPrototypeOf({router: {type: T.RouterState(), isConst: false, isFinal: true, libraryUri: I[2]}}, dart.getFields(dart.global.Object.getPrototypeOf(inherited_router.InheritedRouter))));
  var state$0 = dart.privateName(inherited_router, "InheritedRouteState.state");
  inherited_router.InheritedRouteState = class InheritedRouteState extends framework.InheritedComponent {
    get state() {
      return this[state$0];
    }
    set state(value) {
      super.state = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let state = opts && 'state' in opts ? opts.state : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return new inherited_router.InheritedRouteState.new({child: child, state: state, key: key});
    }
    updateShouldNotify(oldComponent) {
      T.InheritedRouteState()[_as](oldComponent);
      return !dart.equals(this.state, oldComponent.state);
    }
  };
  (inherited_router.InheritedRouteState.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let state = opts && 'state' in opts ? opts.state : null;
    let key = opts && 'key' in opts ? opts.key : null;
    this[state$0] = state;
    dart.global.Object.getPrototypeOf(inherited_router.InheritedRouteState).new.call(this, {child: child, key: key});
    ;
  }).prototype = inherited_router.InheritedRouteState.prototype;
  dart.addTypeTests(inherited_router.InheritedRouteState);
  dart.addRtiResources(inherited_router.InheritedRouteState, ["jaspr_router__src__misc__inherited_router|InheritedRouteState"]);
  dart.addTypeCaches(inherited_router.InheritedRouteState);
  dart.setMethodSignature(inherited_router.InheritedRouteState, () => dart.global.Object.setPrototypeOf({updateShouldNotify: T.ObjectNTobool()}, dart.getMethods(dart.global.Object.getPrototypeOf(inherited_router.InheritedRouteState))));
  dart.setLibraryUri(inherited_router.InheritedRouteState, I[11]);
  dart.setFieldSignature(inherited_router.InheritedRouteState, () => dart.global.Object.setPrototypeOf({state: {type: T.RouteState(), isConst: false, isFinal: true, libraryUri: I[10]}}, dart.getFields(dart.global.Object.getPrototypeOf(inherited_router.InheritedRouteState))));
  var routes$1 = dart.privateName(route, "RouteBase.routes");
  route.RouteBase = class RouteBase extends core.Object {
    get routes() {
      return this[routes$1];
    }
    set routes(value) {
      super.routes = value;
    }
  };
  (route.RouteBase.__ = function(opts) {
    let routes = opts && 'routes' in opts ? opts.routes : C[3] || CT.C3;
    this[routes$1] = routes;
    ;
  }).prototype = route.RouteBase.prototype;
  dart.addTypeTests(route.RouteBase);
  dart.addRtiResources(route.RouteBase, ["jaspr_router__src__route|RouteBase"]);
  dart.addTypeCaches(route.RouteBase);
  dart.setLibraryUri(route.RouteBase, I[12]);
  dart.setFieldSignature(route.RouteBase, () => dart.global.Object.setPrototypeOf({routes: {type: T.ListOfRouteBase(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(route.RouteBase))));
  var name$0 = dart.privateName(route, "Route.name");
  var path$0 = dart.privateName(route, "Route.path");
  var title$ = dart.privateName(route, "Route.title");
  var builder$0 = dart.privateName(route, "Route.builder");
  var redirect$0 = dart.privateName(route, "Route.redirect");
  var pathParams = dart.privateName(route, "Route.pathParams");
  var __Route__pathRE = dart.privateName(route, "_#Route#_pathRE");
  var _pathRE = dart.privateName(route, "_pathRE");
  route.Route = class Route extends route.RouteBase {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get path() {
      return this[path$0];
    }
    set path(value) {
      super.path = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get builder() {
      return this[builder$0];
    }
    set builder(value) {
      super.builder = value;
    }
    get redirect() {
      return this[redirect$0];
    }
    set redirect(value) {
      super.redirect = value;
    }
    get pathParams() {
      return this[pathParams];
    }
    set pathParams(value) {
      super.pathParams = value;
    }
    static ['_#new#tearOff'](opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let redirect = opts && 'redirect' in opts ? opts.redirect : null;
      let routes = opts && 'routes' in opts ? opts.routes : C[3] || CT.C3;
      return new route.Route.new({path: path, name: name, title: title, builder: builder, redirect: redirect, routes: routes});
    }
    static ['_#lazy#tearOff'](opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let redirect = opts && 'redirect' in opts ? opts.redirect : null;
      let load = opts && 'load' in opts ? opts.load : null;
      let routes = opts && 'routes' in opts ? opts.routes : C[3] || CT.C3;
      return new route.LazyRoute.new({path: path, name: name, title: title, builder: builder, redirect: redirect, load: load, routes: routes});
    }
    get pathRegex() {
      return this[_pathRE];
    }
    get [_pathRE]() {
      let t$3614;
      t$3614 = this[__Route__pathRE];
      return t$3614 == null ? dart.throw(new _internal.LateError.fieldNI("_pathRE")) : t$3614;
    }
    set [_pathRE](_pathRE$35param) {
      if (this[__Route__pathRE] == null)
        this[__Route__pathRE] = _pathRE$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_pathRE"));
    }
  };
  (route.Route.new = function(opts) {
    let path = opts && 'path' in opts ? opts.path : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let redirect = opts && 'redirect' in opts ? opts.redirect : null;
    let routes = opts && 'routes' in opts ? opts.routes : C[3] || CT.C3;
    this[pathParams] = G.JSArrayOfString().of([]);
    this[__Route__pathRE] = null;
    this[path$0] = path;
    this[name$0] = name;
    this[title$] = title;
    this[builder$0] = builder;
    this[redirect$0] = redirect;
    if (!path[$isNotEmpty]) dart.assertFailed("Route path cannot be empty", I[13], 22, 16, "path.isNotEmpty");
    if (!(name == null || name[$isNotEmpty])) dart.assertFailed("Route name cannot be empty", I[13], 23, 16, "name == null || name.isNotEmpty");
    if (!(builder != null || redirect != null)) dart.assertFailed("builder or redirect must be provided", I[13], 24, 16, "builder != null || redirect != null");
    dart.global.Object.getPrototypeOf(route.Route).__.call(this, {routes: routes});
    this[_pathRE] = path_utils.patternToRegExp(this.path, this.pathParams);
  }).prototype = route.Route.prototype;
  dart.addTypeTests(route.Route);
  dart.addRtiResources(route.Route, ["jaspr_router__src__route|Route"]);
  dart.addTypeCaches(route.Route);
  dart.setStaticMethodSignature(route.Route, () => ['lazy']);
  dart.setGetterSignature(route.Route, () => dart.global.Object.setPrototypeOf({
    pathRegex: T.RegExp(),
    [_pathRE]: T.RegExp()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(route.Route))));
  dart.setSetterSignature(route.Route, () => dart.global.Object.setPrototypeOf({[_pathRE]: T.RegExp()}, dart.getSetters(dart.global.Object.getPrototypeOf(route.Route))));
  dart.setLibraryUri(route.Route, I[12]);
  dart.setFieldSignature(route.Route, () => dart.global.Object.setPrototypeOf({
    name: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    path: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    title: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    builder: {type: T.BuildContextAndRouteStateToNComponent(), isConst: false, isFinal: true},
    redirect: {type: T.BuildContextAndRouteStateToNFutureOrOfStringN(), isConst: false, isFinal: true},
    pathParams: {type: T.ListOfString(), isConst: false, isFinal: true, libraryUri: I[1]},
    [__Route__pathRE]: {type: T.RegExpN(), isConst: false, isFinal: false, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(route.Route))));
  var load$ = dart.privateName(route, "LazyRoute.load");
  route.LazyRouteMixin = class LazyRouteMixin extends core.Object {};
  route.LazyRouteMixin[dart.mixinOn] = Object => class LazyRouteMixin extends Object {};
  (route.LazyRouteMixin[dart.mixinNew] = function() {
  }).prototype = route.LazyRouteMixin.prototype;
  dart.addTypeTests(route.LazyRouteMixin);
  dart.addRtiResources(route.LazyRouteMixin, ["jaspr_router__src__route|LazyRouteMixin"]);
  dart.addTypeCaches(route.LazyRouteMixin);
  dart.setLibraryUri(route.LazyRouteMixin, I[12]);
  const Route_LazyRouteMixin$36 = class Route_LazyRouteMixin extends route.Route {};
  (Route_LazyRouteMixin$36.new = function(opts) {
    dart.global.Object.getPrototypeOf(Route_LazyRouteMixin$36).new.call(this, opts);
  }).prototype = Route_LazyRouteMixin$36.prototype;
  dart.applyMixin(Route_LazyRouteMixin$36, route.LazyRouteMixin);
  route.LazyRoute = class LazyRoute extends Route_LazyRouteMixin$36 {
    get load() {
      return this[load$];
    }
    set load(value) {
      super.load = value;
    }
    static ['_#new#tearOff'](opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let redirect = opts && 'redirect' in opts ? opts.redirect : null;
      let load = opts && 'load' in opts ? opts.load : null;
      let routes = opts && 'routes' in opts ? opts.routes : C[3] || CT.C3;
      return new route.LazyRoute.new({path: path, name: name, title: title, builder: builder, redirect: redirect, load: load, routes: routes});
    }
  };
  (route.LazyRoute.new = function(opts) {
    let path = opts && 'path' in opts ? opts.path : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let redirect = opts && 'redirect' in opts ? opts.redirect : null;
    let load = opts && 'load' in opts ? opts.load : null;
    let routes = opts && 'routes' in opts ? opts.routes : C[3] || CT.C3;
    this[load$] = load;
    dart.global.Object.getPrototypeOf(route.LazyRoute).new.call(this, {path: path, name: name, title: title, builder: builder, redirect: redirect, routes: routes});
    ;
  }).prototype = route.LazyRoute.prototype;
  dart.addTypeTests(route.LazyRoute);
  dart.addRtiResources(route.LazyRoute, ["jaspr_router__src__route|LazyRoute"]);
  dart.addTypeCaches(route.LazyRoute);
  dart.setLibraryUri(route.LazyRoute, I[12]);
  dart.setFieldSignature(route.LazyRoute, () => dart.global.Object.setPrototypeOf({load: {type: T.VoidToFutureOfvoid(), isConst: false, isFinal: true}}, dart.getFields(dart.global.Object.getPrototypeOf(route.LazyRoute))));
  var builder$1 = dart.privateName(route, "ShellRoute.builder");
  route.ShellRoute = class ShellRoute extends route.RouteBase {
    get builder() {
      return this[builder$1];
    }
    set builder(value) {
      super.builder = value;
    }
    static ['_#new#tearOff'](opts) {
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let routes = opts && 'routes' in opts ? opts.routes : C[3] || CT.C3;
      return new route.ShellRoute.new({builder: builder, routes: routes});
    }
    static ['_#lazy#tearOff'](opts) {
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let load = opts && 'load' in opts ? opts.load : null;
      let routes = opts && 'routes' in opts ? opts.routes : C[3] || CT.C3;
      return new route.LazyShellRoute.new({builder: builder, load: load, routes: routes});
    }
  };
  (route.ShellRoute.new = function(opts) {
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let routes = opts && 'routes' in opts ? opts.routes : C[3] || CT.C3;
    this[builder$1] = builder;
    if (!routes[$isNotEmpty]) dart.assertFailed(null, I[13], 78, 16, "routes.isNotEmpty");
    dart.global.Object.getPrototypeOf(route.ShellRoute).__.call(this, {routes: routes});
    ;
  }).prototype = route.ShellRoute.prototype;
  dart.addTypeTests(route.ShellRoute);
  dart.addRtiResources(route.ShellRoute, ["jaspr_router__src__route|ShellRoute"]);
  dart.addTypeCaches(route.ShellRoute);
  dart.setStaticMethodSignature(route.ShellRoute, () => ['lazy']);
  dart.setLibraryUri(route.ShellRoute, I[12]);
  dart.setFieldSignature(route.ShellRoute, () => dart.global.Object.setPrototypeOf({builder: {type: T.BuildContextAndRouteStateAndComponentToComponent(), isConst: false, isFinal: true}}, dart.getFields(dart.global.Object.getPrototypeOf(route.ShellRoute))));
  var load$0 = dart.privateName(route, "LazyShellRoute.load");
  const ShellRoute_LazyRouteMixin$36 = class ShellRoute_LazyRouteMixin extends route.ShellRoute {};
  (ShellRoute_LazyRouteMixin$36.new = function(opts) {
    dart.global.Object.getPrototypeOf(ShellRoute_LazyRouteMixin$36).new.call(this, opts);
  }).prototype = ShellRoute_LazyRouteMixin$36.prototype;
  dart.applyMixin(ShellRoute_LazyRouteMixin$36, route.LazyRouteMixin);
  route.LazyShellRoute = class LazyShellRoute extends ShellRoute_LazyRouteMixin$36 {
    get load() {
      return this[load$0];
    }
    set load(value) {
      super.load = value;
    }
    static ['_#new#tearOff'](opts) {
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let load = opts && 'load' in opts ? opts.load : null;
      let routes = opts && 'routes' in opts ? opts.routes : C[3] || CT.C3;
      return new route.LazyShellRoute.new({builder: builder, load: load, routes: routes});
    }
  };
  (route.LazyShellRoute.new = function(opts) {
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let load = opts && 'load' in opts ? opts.load : null;
    let routes = opts && 'routes' in opts ? opts.routes : C[3] || CT.C3;
    this[load$0] = load;
    dart.global.Object.getPrototypeOf(route.LazyShellRoute).new.call(this, {builder: builder, routes: routes});
    ;
  }).prototype = route.LazyShellRoute.prototype;
  dart.addTypeTests(route.LazyShellRoute);
  dart.addRtiResources(route.LazyShellRoute, ["jaspr_router__src__route|LazyShellRoute"]);
  dart.addTypeCaches(route.LazyShellRoute);
  dart.setLibraryUri(route.LazyShellRoute, I[12]);
  dart.setFieldSignature(route.LazyShellRoute, () => dart.global.Object.setPrototypeOf({load: {type: T.VoidToFutureOfvoid(), isConst: false, isFinal: true}}, dart.getFields(dart.global.Object.getPrototypeOf(route.LazyShellRoute))));
  path_utils.patternToRegExp = function patternToRegExp(pattern, parameters) {
    let buffer = new core.StringBuffer.new("^");
    let start = 0;
    for (let match of path_utils._parameterRegExp.allMatches(pattern)) {
      if (match.start > start) {
        buffer.write(core.RegExp.escape(pattern[$substring](start, match.start)));
      }
      let name = dart.nullCheck(match._get(1));
      let optionalPattern = match._get(2);
      let regex = optionalPattern != null ? path_utils._escapeGroup(optionalPattern, name) : "(?<" + name + ">[^/]+)";
      buffer.write(regex);
      parameters[$add](name);
      start = match.end;
    }
    if (start < pattern.length) {
      buffer.write(core.RegExp.escape(pattern[$substring](start)));
    }
    if (!pattern[$endsWith]("/")) {
      buffer.write("(?=/|$)");
    }
    return core.RegExp.new(dart.toString(buffer), {caseSensitive: false});
  };
  path_utils.patternToPath = function patternToPath(pattern, pathParameters) {
    let buffer = new core.StringBuffer.new();
    let start = 0;
    for (let match of path_utils._parameterRegExp.allMatches(pattern)) {
      if (match.start > start) {
        buffer.write(pattern[$substring](start, match.start));
      }
      let name = dart.nullCheck(match._get(1));
      buffer.write(pathParameters[$_get](name));
      start = match.end;
    }
    if (start < pattern.length) {
      buffer.write(pattern[$substring](start));
    }
    return dart.toString(buffer);
  };
  path_utils._escapeGroup = function _escapeGroup(group, name = null) {
    let escapedGroup = group[$replaceFirstMapped](core.RegExp.new("[:=!]"), dart.fn(match => "\\" + dart.str(match._get(0)), T.MatchToString()));
    if (name != null) {
      return "(?<" + dart.str(name) + ">" + escapedGroup + ")";
    }
    return escapedGroup;
  };
  path_utils.concatenatePaths = function concatenatePaths(parentPath, childPath) {
    if (parentPath[$isEmpty]) {
      if (!childPath[$startsWith]("/")) dart.assertFailed(null, I[14], 90, 12, "childPath.startsWith('/')");
      if (!(childPath === "/" || !childPath[$endsWith]("/"))) dart.assertFailed(null, I[14], 91, 12, "childPath == '/' || !childPath.endsWith('/')");
      return childPath;
    }
    if (!childPath[$isNotEmpty]) dart.assertFailed(null, I[14], 96, 10, "childPath.isNotEmpty");
    if (!!childPath[$startsWith]("/")) dart.assertFailed(null, I[14], 97, 10, "!childPath.startsWith('/')");
    if (!!childPath[$endsWith]("/")) dart.assertFailed(null, I[14], 98, 10, "!childPath.endsWith('/')");
    return (parentPath === "/" ? "" : parentPath) + "/" + childPath;
  };
  path_utils.extractPathParameters = function extractPathParameters(parameters, match) {
    return (() => {
      let t$3614 = new (G.IdentityMapOfString$String()).new();
      for (let i = 0; i < parameters[$length]; i = i + 1)
        t$3614[$_set](parameters[$_get](i), dart.nullCheck(match.namedGroup(parameters[$_get](i))));
      return t$3614;
    })();
  };
  path_utils.canonicalUri = function canonicalUri(loc) {
    let canon = dart.toString(core.Uri.parse(loc));
    canon = canon[$endsWith]("?") ? canon[$substring](0, canon.length - 1) : canon;
    canon = canon[$endsWith]("/") && canon !== "/" && !canon[$contains]("?") ? canon[$substring](0, canon.length - 1) : canon;
    canon = canon[$replaceFirst]("/?", "?", 1);
    return canon;
  };
  path_utils.matchPatternAsPrefix = function matchPatternAsPrefix(route, loc) {
    return T.RegExpMatchN()[_as](route.pathRegex[$matchAsPrefix](loc));
  };
  path_utils.extractPathParams = function extractPathParams(route, match) {
    return path_utils.extractPathParameters(route.pathParams, match);
  };
  dart.defineLazy(path_utils, {
    /*path_utils._parameterRegExp*/get _parameterRegExp() {
      return core.RegExp.new(":(\\w+)(\\((?:\\\\.|[^\\\\()])+\\))?");
    }
  }, false);
  var message$ = dart.privateName(errors, "RouterError.message");
  errors.RouterError = class RouterError extends core.Error {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](message) {
      return new errors.RouterError.new(message);
    }
    toString() {
      return "RouterError: " + this.message;
    }
  };
  (errors.RouterError.new = function(message) {
    this[message$] = message;
    dart.global.Object.getPrototypeOf(errors.RouterError).new.call(this);
    ;
  }).prototype = errors.RouterError.prototype;
  dart.addTypeTests(errors.RouterError);
  dart.addRtiResources(errors.RouterError, ["jaspr_router__src__misc__errors|RouterError"]);
  dart.addTypeCaches(errors.RouterError);
  dart.setLibraryUri(errors.RouterError, I[15]);
  dart.setFieldSignature(errors.RouterError, () => dart.global.Object.setPrototypeOf({message: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]}}, dart.getFields(dart.global.Object.getPrototypeOf(errors.RouterError))));
  dart.defineExtensionMethods(errors.RouterError, ['toString']);
  platform.PlatformRouter = class PlatformRouter extends core.Object {};
  (platform.PlatformRouter.new = function() {
    ;
  }).prototype = platform.PlatformRouter.prototype;
  dart.addTypeTests(platform.PlatformRouter);
  dart.addRtiResources(platform.PlatformRouter, ["jaspr_router__src__platform__platform|PlatformRouter"]);
  dart.addTypeCaches(platform.PlatformRouter);
  dart.setLibraryUri(platform.PlatformRouter, I[16]);
  dart.setStaticFieldSignature(platform.PlatformRouter, () => ['instance']);
  dart.defineLazy(platform.PlatformRouter, {
    /*platform.PlatformRouter.instance*/get instance() {
      return new platform_web.PlatformRouterImpl.new();
    },
    set instance(value) {}
  }, false);
  platform.HistoryManager = class HistoryManager extends core.Object {};
  (platform.HistoryManager.new = function() {
    ;
  }).prototype = platform.HistoryManager.prototype;
  dart.addTypeTests(platform.HistoryManager);
  dart.addRtiResources(platform.HistoryManager, ["jaspr_router__src__platform__platform|HistoryManager"]);
  dart.addTypeCaches(platform.HistoryManager);
  dart.setLibraryUri(platform.HistoryManager, I[16]);
  platform.RouteRegistry = class RouteRegistry extends core.Object {};
  (platform.RouteRegistry.new = function() {
    ;
  }).prototype = platform.RouteRegistry.prototype;
  dart.addTypeTests(platform.RouteRegistry);
  dart.addRtiResources(platform.RouteRegistry, ["jaspr_router__src__platform__platform|RouteRegistry"]);
  dart.addTypeCaches(platform.RouteRegistry);
  dart.setLibraryUri(platform.RouteRegistry, I[16]);
  var history = dart.privateName(platform_web, "PlatformRouterImpl.history");
  var registry = dart.privateName(platform_web, "PlatformRouterImpl.registry");
  platform_web.PlatformRouterImpl = class PlatformRouterImpl extends core.Object {
    get history() {
      return this[history];
    }
    set history(value) {
      super.history = value;
    }
    get registry() {
      return this[registry];
    }
    set registry(value) {
      super.registry = value;
    }
    static ['_#new#tearOff']() {
      return new platform_web.PlatformRouterImpl.new();
    }
  };
  (platform_web.PlatformRouterImpl.new = function() {
    this[history] = new platform_web.HistoryManagerImpl.new();
    this[registry] = new platform_web.RouteRegistryImpl.new();
    ;
  }).prototype = platform_web.PlatformRouterImpl.prototype;
  dart.addTypeTests(platform_web.PlatformRouterImpl);
  dart.addRtiResources(platform_web.PlatformRouterImpl, ["jaspr_router__src__platform__platform_web|PlatformRouterImpl", "jaspr_router__src__platform__platform|PlatformRouter"]);
  dart.addTypeCaches(platform_web.PlatformRouterImpl);
  dart.setLibraryUri(platform_web.PlatformRouterImpl, I[17]);
  dart.setFieldSignature(platform_web.PlatformRouterImpl, () => dart.global.Object.setPrototypeOf({
    history: {type: T.HistoryManager(), isConst: false, isFinal: true, libraryUri: I[16]},
    registry: {type: T.RouteRegistry(), isConst: false, isFinal: true, libraryUri: I[16]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(platform_web.PlatformRouterImpl))));
  platform_web.HistoryManagerImpl = class HistoryManagerImpl extends core.Object {
    init(binding, opts) {
      let onChangeState = opts && 'onChangeState' in opts ? opts.onChangeState : null;
      if (onChangeState != null) {
        html.window[$onPopState].listen(dart.fn(event => {
          onChangeState(html.window[$history][$state]);
        }, T.PopStateEventTovoid()));
      }
    }
    push(url, opts) {
      let t$3615;
      let title = opts && 'title' in opts ? opts.title : null;
      let data = opts && 'data' in opts ? opts.data : null;
      html.window[$history][$pushState](data, (t$3615 = title, t$3615 == null ? url : t$3615), url);
    }
    replace(url, opts) {
      let t$3615;
      let title = opts && 'title' in opts ? opts.title : null;
      let data = opts && 'data' in opts ? opts.data : null;
      html.window[$history][$replaceState](data, (t$3615 = title, t$3615 == null ? url : t$3615), url);
    }
    back() {
      html.window[$history].back();
    }
    static ['_#new#tearOff']() {
      return new platform_web.HistoryManagerImpl.new();
    }
  };
  (platform_web.HistoryManagerImpl.new = function() {
    ;
  }).prototype = platform_web.HistoryManagerImpl.prototype;
  dart.addTypeTests(platform_web.HistoryManagerImpl);
  dart.addRtiResources(platform_web.HistoryManagerImpl, ["jaspr_router__src__platform__platform_web|HistoryManagerImpl", "jaspr_router__src__platform__platform|HistoryManager"]);
  dart.addTypeCaches(platform_web.HistoryManagerImpl);
  dart.setMethodSignature(platform_web.HistoryManagerImpl, () => dart.global.Object.setPrototypeOf({
    init: T.AppBinding__Tovoid(),
    push: T.String__Tovoid$2(),
    replace: T.String__Tovoid$2(),
    back: T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(platform_web.HistoryManagerImpl))));
  dart.setLibraryUri(platform_web.HistoryManagerImpl, I[17]);
  platform_web.RouteRegistryImpl = class RouteRegistryImpl extends core.Object {
    registerRoutes(routes) {
    }
    static ['_#new#tearOff']() {
      return new platform_web.RouteRegistryImpl.new();
    }
  };
  (platform_web.RouteRegistryImpl.new = function() {
    ;
  }).prototype = platform_web.RouteRegistryImpl.prototype;
  dart.addTypeTests(platform_web.RouteRegistryImpl);
  dart.addRtiResources(platform_web.RouteRegistryImpl, ["jaspr_router__src__platform__platform_web|RouteRegistryImpl", "jaspr_router__src__platform__platform|RouteRegistry"]);
  dart.addTypeCaches(platform_web.RouteRegistryImpl);
  dart.setMethodSignature(platform_web.RouteRegistryImpl, () => dart.global.Object.setPrototypeOf({registerRoutes: T.ListOfRouteBaseTovoid()}, dart.getMethods(dart.global.Object.getPrototypeOf(platform_web.RouteRegistryImpl))));
  dart.setLibraryUri(platform_web.RouteRegistryImpl, I[17]);
  var configuration$ = dart.privateName(parser, "RouteInformationParser.configuration");
  var matcher = dart.privateName(parser, "RouteInformationParser.matcher");
  var redirector = dart.privateName(parser, "RouteInformationParser.redirector");
  parser.RouteInformationParser = class RouteInformationParser extends core.Object {
    get configuration() {
      return this[configuration$];
    }
    set configuration(value) {
      super.configuration = value;
    }
    get matcher() {
      return this[matcher];
    }
    set matcher(value) {
      super.matcher = value;
    }
    get redirector() {
      return this[redirector];
    }
    set redirector(value) {
      super.redirector = value;
    }
    static ['_#new#tearOff'](opts) {
      let configuration = opts && 'configuration' in opts ? opts.configuration : null;
      return new parser.RouteInformationParser.new({configuration: configuration});
    }
    parseRouteInformation(location, context, opts) {
      let t$3624, t$3623, t$3622, t$3621, t$3620;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let t$36$35initialMatches = null;
      function t$36$35initialMatches$35get() {
        let t$3616;
        t$3616 = t$36$35initialMatches;
        return t$3616 == null ? dart.throw(new _internal.LateError.localNI("initialMatches")) : t$3616;
      }
      function t$36$35initialMatches$35set(initialMatches$35param) {
        if (t$36$35initialMatches == null)
          return t$36$35initialMatches = initialMatches$35param;
        else
          dart.throw(new _internal.LateError.localAI("initialMatches"));
      }
      try {
        t$36$35initialMatches$35set(this.matcher.findMatch(location, {extra: extra}));
      } catch (t$36$35e) {
        let t$36$35ex = dart.getThrown(t$36$35e);
        if (T.MatcherError()[_is](t$36$35ex)) {
          developer.log("No initial matches: " + location);
          t$36$35initialMatches$35set(new matching.RouteMatchList.new(G.JSArrayOfRouteMatch().of([]), core.Uri.parse(path_utils.canonicalUri(location)), C[0] || CT.C0));
        } else
          throw t$36$35e;
      }
      function processRedirectorResult(matches) {
        if (matches.isEmpty) {
          return new (G.SynchronousFutureOfRouteMatchList()).new(matching.errorScreen(core.Uri.parse(location), dart.toString(new matching.MatcherError.new("no routes for location", location))));
        }
        return new (G.SynchronousFutureOfRouteMatchList()).new(matches);
      }
      dart.fn(processRedirectorResult, T.RouteMatchListToFutureOfRouteMatchList());
      let redirectorResult = (t$3620 = context, t$3621 = t$36$35initialMatches$35get(), t$3622 = this.configuration, t$3623 = this.matcher, t$3624 = extra, this.redirector(t$3620, t$3621, t$3622, t$3623, {extra: t$3624}));
      if (T.RouteMatchList()[_is](redirectorResult)) {
        return processRedirectorResult(redirectorResult);
      }
      return redirectorResult.then(T.RouteMatchList(), processRedirectorResult);
    }
  };
  (parser.RouteInformationParser.new = function(opts) {
    let configuration = opts && 'configuration' in opts ? opts.configuration : null;
    this[configuration$] = configuration;
    this[matcher] = new matching.RouteMatcher.new(configuration);
    this[redirector] = C[4] || CT.C4;
    ;
  }).prototype = parser.RouteInformationParser.prototype;
  dart.addTypeTests(parser.RouteInformationParser);
  dart.addRtiResources(parser.RouteInformationParser, ["jaspr_router__src__parser|RouteInformationParser"]);
  dart.addTypeCaches(parser.RouteInformationParser);
  dart.setMethodSignature(parser.RouteInformationParser, () => dart.global.Object.setPrototypeOf({parseRouteInformation: T.StringAndBuildContext__ToFutureOfRouteMatchList()}, dart.getMethods(dart.global.Object.getPrototypeOf(parser.RouteInformationParser))));
  dart.setLibraryUri(parser.RouteInformationParser, I[4]);
  dart.setFieldSignature(parser.RouteInformationParser, () => dart.global.Object.setPrototypeOf({
    configuration: {type: T.RouteConfiguration(), isConst: false, isFinal: true, libraryUri: I[3]},
    matcher: {type: T.RouteMatcher(), isConst: false, isFinal: true, libraryUri: I[7]},
    redirector: {type: T.BuildContextAndRouteMatchListAndRouteConfiguration__ToFutureOrOfRouteMatchList(), isConst: false, isFinal: true}
  }, dart.getFields(dart.global.Object.getPrototypeOf(parser.RouteInformationParser))));
  var matches$ = dart.privateName(redirection, "RedirectionError.matches");
  var message$0 = dart.privateName(redirection, "RedirectionError.message");
  var location$0 = dart.privateName(redirection, "RedirectionError.location");
  redirection.RedirectionError = class RedirectionError extends core.Error {
    get matches() {
      return this[matches$];
    }
    set matches(value) {
      super.matches = value;
    }
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    get location() {
      return this[location$0];
    }
    set location(value) {
      super.location = value;
    }
    static ['_#new#tearOff'](message, matches, location) {
      return new redirection.RedirectionError.new(message, matches, location);
    }
    toString() {
      return super[$toString]() + " " + (() => {
        let t$3620 = G.ListOfString().of(this.matches[$map](T.String(), dart.fn(routeMatches => dart.toString(routeMatches.uri), T.RouteMatchListToString())));
        return t$3620;
      })()[$join](" => ");
    }
  };
  (redirection.RedirectionError.new = function(message, matches, location) {
    this[message$0] = message;
    this[matches$] = matches;
    this[location$0] = location;
    dart.global.Object.getPrototypeOf(redirection.RedirectionError).new.call(this);
    ;
  }).prototype = redirection.RedirectionError.prototype;
  dart.addTypeTests(redirection.RedirectionError);
  dart.addRtiResources(redirection.RedirectionError, ["jaspr_router__src__redirection|RedirectionError", "core|UnsupportedError", "core|Error"]);
  dart.addTypeCaches(redirection.RedirectionError);
  dart.setLibraryUri(redirection.RedirectionError, I[18]);
  dart.setFieldSignature(redirection.RedirectionError, () => dart.global.Object.setPrototypeOf({
    matches: {type: T.ListOfRouteMatchList(), isConst: false, isFinal: true, libraryUri: I[1]},
    message: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    location: {type: T.Uri(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(redirection.RedirectionError))));
  dart.defineExtensionMethods(redirection.RedirectionError, ['toString']);
  redirection.redirect = function redirect(context, prevMatchList, configuration, matcher, opts) {
    let t$3623, t$3622, t$3621;
    let redirectHistory = opts && 'redirectHistory' in opts ? opts.redirectHistory : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let prevLocation = dart.toString(prevMatchList.uri);
    function processTopLevelRedirect(topRedirectLocation) {
      if (topRedirectLocation != null && topRedirectLocation !== prevLocation) {
        let newMatch = redirection._getNewMatches(topRedirectLocation, prevMatchList.uri, configuration, matcher, dart.nullCheck(redirectHistory));
        if (newMatch.isError) {
          return newMatch;
        }
        return redirection.redirect(context, newMatch, configuration, matcher, {redirectHistory: redirectHistory, extra: extra});
      }
      function processRouteLevelRedirect(routeRedirectLocation) {
        if (routeRedirectLocation != null && routeRedirectLocation !== prevLocation) {
          let newMatch = redirection._getNewMatches(routeRedirectLocation, prevMatchList.uri, configuration, matcher, dart.nullCheck(redirectHistory));
          if (newMatch.isError) {
            return newMatch;
          }
          return redirection.redirect(context, newMatch, configuration, matcher, {redirectHistory: redirectHistory, extra: extra});
        }
        return prevMatchList;
      }
      dart.fn(processRouteLevelRedirect, T.StringNToFutureOrOfRouteMatchList());
      let routeLevelRedirectResult = redirection._getRouteLevelRedirect(context, configuration, prevMatchList, 0);
      if (T.StringN()[_is](routeLevelRedirectResult)) {
        return processRouteLevelRedirect(routeLevelRedirectResult);
      }
      return routeLevelRedirectResult.then(T.RouteMatchList(), processRouteLevelRedirect);
    }
    dart.fn(processTopLevelRedirect, T.StringNToFutureOrOfRouteMatchList());
    redirectHistory == null ? redirectHistory = G.JSArrayOfRouteMatchList().of([prevMatchList]) : null;
    let topRedirectResult = (t$3621 = configuration, t$3622 = context, t$3623 = new state$.RouteState.new({location: prevLocation, name: null, subloc: prevMatchList.uri.path, queryParams: prevMatchList.uri.queryParameters, queryParametersAll: prevMatchList.uri.queryParametersAll, extra: extra}), t$3621.topRedirect(t$3622, t$3623));
    if (T.StringN()[_is](topRedirectResult)) {
      return processTopLevelRedirect(topRedirectResult);
    }
    return topRedirectResult.then(T.RouteMatchList(), processTopLevelRedirect);
  };
  redirection._getRouteLevelRedirect = function _getRouteLevelRedirect(context, configuration, matchList, currentCheckIndex) {
    if (currentCheckIndex >= matchList.matches[$length]) {
      return null;
    }
    let match = matchList.matches[$_get](currentCheckIndex);
    function processRouteRedirect(newLocation) {
      let t$3621;
      t$3621 = newLocation;
      return t$3621 == null ? redirection._getRouteLevelRedirect(context, configuration, matchList, currentCheckIndex + 1) : t$3621;
    }
    dart.fn(processRouteRedirect, T.StringNToFutureOrOfStringN());
    let route = match.route;
    let routeRedirectResult = null;
    if (T.Route()[_is](route) && route.redirect != null) {
      routeRedirectResult = dart.nullCheck(route.redirect)(context, new state$.RouteState.new({location: dart.toString(matchList.uri), subloc: match.subloc, name: route.name, path: route.path, fullpath: matchList.fullpath, extra: match.extra, params: matchList.pathParameters, queryParams: matchList.uri.queryParameters, queryParametersAll: matchList.uri.queryParametersAll}));
    }
    if (T.StringN()[_is](routeRedirectResult)) {
      return processRouteRedirect(routeRedirectResult);
    }
    return routeRedirectResult.then(T.StringN(), processRouteRedirect);
  };
  redirection._getNewMatches = function _getNewMatches(newLocation, previousLocation, configuration, matcher, redirectHistory) {
    try {
      let newMatch = matcher.findMatch(newLocation);
      redirection._addRedirect(redirectHistory, newMatch, previousLocation, configuration.redirectLimit);
      return newMatch;
    } catch (t$36$35e) {
      let t$36$35ex = dart.getThrown(t$36$35e);
      if (T.RedirectionError()[_is](t$36$35ex)) {
        let e = t$36$35ex;
        return redirection._handleRedirectionError(e);
      } else if (T.MatcherError()[_is](t$36$35ex)) {
        let e = t$36$35ex;
        return redirection._handleMatcherError(e);
      } else
        throw t$36$35e;
    }
  };
  redirection._handleMatcherError = function _handleMatcherError(error) {
    developer.log("Match error: " + error.message);
    let uri = core.Uri.parse(error.location);
    return matching.errorScreen(uri, error.message);
  };
  redirection._handleRedirectionError = function _handleRedirectionError(error) {
    developer.log("Redirection error: " + error.message);
    let uri = error.location;
    return matching.errorScreen(uri, error.message);
  };
  redirection._addRedirect = function _addRedirect(redirects, newMatch, prevLocation, redirectLimit) {
    if (!dart.fn(() => {
      if (redirects[$contains](newMatch)) {
        dart.throw(new redirection.RedirectionError.new("redirect loop detected", (() => {
          let t$3623 = G.ListOfRouteMatchList().of(redirects);
          t$3623.push(newMatch);
          return t$3623;
        })(), prevLocation));
      }
      if (redirects[$length] > redirectLimit) {
        dart.throw(new redirection.RedirectionError.new("too many redirects", (() => {
          let t$3624 = G.ListOfRouteMatchList().of(redirects);
          t$3624.push(newMatch);
          return t$3624;
        })(), prevLocation));
      }
      return true;
    }, T.VoidTobool())()) dart.assertFailed(null, I[19], 200, 10, "() {\n    if (redirects.contains(newMatch)) {\n      throw RedirectionError('redirect loop detected', <RouteMatchList>[...redirects, newMatch], prevLocation);\n    }\n    if (redirects.length > redirectLimit) {\n      throw RedirectionError('too many redirects', <RouteMatchList>[...redirects, newMatch], prevLocation);\n    }\n    return true;\n  }()");
    redirects[$add](newMatch);
    if (!dart.fn(() => {
      developer.log("redirecting to " + dart.str(newMatch));
      return true;
    }, T.VoidTobool())()) dart.assertFailed(null, I[19], 212, 10, "() {\n    log('redirecting to $newMatch');\n    return true;\n  }()");
  };
  var configuration$0 = dart.privateName(matching, "RouteMatcher.configuration");
  var _getLocRouteMatches = dart.privateName(matching, "_getLocRouteMatches");
  matching.RouteMatcher = class RouteMatcher extends core.Object {
    get configuration() {
      return this[configuration$0];
    }
    set configuration(value) {
      super.configuration = value;
    }
    static ['_#new#tearOff'](configuration) {
      return new matching.RouteMatcher.new(configuration);
    }
    findMatch(location, opts) {
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let uri = core.Uri.parse(path_utils.canonicalUri(location));
      let pathParameters = new (G.IdentityMapOfString$String()).new();
      let matches = this[_getLocRouteMatches](uri, extra, pathParameters);
      return new matching.RouteMatchList.new(matches, uri, pathParameters);
    }
    [_getLocRouteMatches](uri, extra, pathParameters) {
      let result = matching._getLocRouteRecursively({loc: uri.path, restLoc: uri.path, routes: this.configuration.routes, parentSubloc: "", pathParameters: pathParameters, extra: extra});
      if (result == null) {
        dart.throw(new matching.MatcherError.new("no routes for location", dart.toString(uri)));
      }
      return result;
    }
  };
  (matching.RouteMatcher.new = function(configuration) {
    this[configuration$0] = configuration;
    ;
  }).prototype = matching.RouteMatcher.prototype;
  dart.addTypeTests(matching.RouteMatcher);
  dart.addRtiResources(matching.RouteMatcher, ["jaspr_router__src__matching|RouteMatcher"]);
  dart.addTypeCaches(matching.RouteMatcher);
  dart.setMethodSignature(matching.RouteMatcher, () => dart.global.Object.setPrototypeOf({
    findMatch: T.String__ToRouteMatchList(),
    [_getLocRouteMatches]: T.UriAndObjectNAndMapOfString$StringToListOfRouteMatch()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(matching.RouteMatcher))));
  dart.setLibraryUri(matching.RouteMatcher, I[7]);
  dart.setFieldSignature(matching.RouteMatcher, () => dart.global.Object.setPrototypeOf({configuration: {type: T.RouteConfiguration(), isConst: false, isFinal: true, libraryUri: I[3]}}, dart.getFields(dart.global.Object.getPrototypeOf(matching.RouteMatcher))));
  var fullpath = dart.privateName(matching, "RouteMatchList.fullpath");
  var pathParameters$ = dart.privateName(matching, "RouteMatchList.pathParameters");
  var uri$ = dart.privateName(matching, "RouteMatchList.uri");
  var _matches = dart.privateName(matching, "_matches");
  matching.RouteMatchList = class RouteMatchList extends core.Object {
    get fullpath() {
      return this[fullpath];
    }
    set fullpath(value) {
      super.fullpath = value;
    }
    get pathParameters() {
      return this[pathParameters$];
    }
    set pathParameters(value) {
      super.pathParameters = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    static ['_#new#tearOff'](matches, uri, pathParameters) {
      return new matching.RouteMatchList.new(matches, uri, pathParameters);
    }
    static _generateFullPath(matches) {
      let buffer = new core.StringBuffer.new();
      let addsSlash = false;
      for (let match of matches) {
        let route = match.route;
        if (T.Route()[_is](route)) {
          if (addsSlash) {
            buffer.write("/");
          }
          buffer.write(route.path);
          addsSlash = addsSlash || route.path !== "/";
        }
      }
      return dart.toString(buffer);
    }
    get isEmpty() {
      return this[_matches][$isEmpty];
    }
    get isNotEmpty() {
      return this[_matches][$isNotEmpty];
    }
    get extra() {
      return this[_matches][$isEmpty] ? null : this[_matches][$last].extra;
    }
    get last() {
      return this[_matches][$last];
    }
    get title() {
      return this[_matches][$reversed][$fold](T.StringN(), null, dart.fn((t, r) => {
        let t$3625;
        t$3625 = t;
        return t$3625 == null ? T.Route()[_is](r.route) ? T.Route()[_as](r.route).title : null : t$3625;
      }, T.StringNAndRouteMatchToStringN()));
    }
    get matches() {
      return this[_matches];
    }
    get isError() {
      return this.matches[$length] === 1 && this.matches[$first].error != null;
    }
    get error() {
      return this.matches[$first].error;
    }
    toString() {
      return object.objectRuntimeType(this, "RouteMatchList") + "(" + this.fullpath + ")";
    }
  };
  (matching.RouteMatchList.new = function(matches, uri, pathParameters) {
    this[uri$] = uri;
    this[pathParameters$] = pathParameters;
    this[_matches] = matches;
    this[fullpath] = matching.RouteMatchList._generateFullPath(matches);
    ;
  }).prototype = matching.RouteMatchList.prototype;
  dart.addTypeTests(matching.RouteMatchList);
  dart.addRtiResources(matching.RouteMatchList, ["jaspr_router__src__matching|RouteMatchList"]);
  dart.addTypeCaches(matching.RouteMatchList);
  dart.setStaticMethodSignature(matching.RouteMatchList, () => ['_generateFullPath']);
  dart.setGetterSignature(matching.RouteMatchList, () => dart.global.Object.setPrototypeOf({
    isEmpty: T.bool(),
    isNotEmpty: T.bool(),
    extra: T.ObjectN(),
    last: T.RouteMatch(),
    title: T.StringN(),
    matches: T.ListOfRouteMatch(),
    isError: T.bool(),
    error: T.ExceptionN()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(matching.RouteMatchList))));
  dart.setLibraryUri(matching.RouteMatchList, I[7]);
  dart.setFieldSignature(matching.RouteMatchList, () => dart.global.Object.setPrototypeOf({
    [_matches]: {type: T.ListOfRouteMatch(), isConst: false, isFinal: true, libraryUri: I[1]},
    fullpath: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    pathParameters: {type: T.MapOfString$String(), isConst: false, isFinal: true, libraryUri: I[1]},
    uri: {type: T.Uri(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(matching.RouteMatchList))));
  dart.setStaticFieldSignature(matching.RouteMatchList, () => ['empty']);
  dart.defineExtensionMethods(matching.RouteMatchList, ['toString']);
  dart.defineLazy(matching.RouteMatchList, {
    /*matching.RouteMatchList.empty*/get empty() {
      return new matching.RouteMatchList.new(G.JSArrayOfRouteMatch().of([]), core.Uri.parse(""), C[0] || CT.C0);
    },
    set empty(value) {}
  }, false);
  var message$1 = dart.privateName(matching, "MatcherError.message");
  var location$1 = dart.privateName(matching, "MatcherError.location");
  matching.MatcherError = class MatcherError extends core.Error {
    get message() {
      return this[message$1];
    }
    set message(value) {
      super.message = value;
    }
    get location() {
      return this[location$1];
    }
    set location(value) {
      super.location = value;
    }
    static ['_#new#tearOff'](message, location) {
      return new matching.MatcherError.new(message, location);
    }
    toString() {
      return this.message;
    }
  };
  (matching.MatcherError.new = function(message, location) {
    this[location$1] = location;
    this[message$1] = message + ": " + location;
    dart.global.Object.getPrototypeOf(matching.MatcherError).new.call(this);
    ;
  }).prototype = matching.MatcherError.prototype;
  dart.addTypeTests(matching.MatcherError);
  dart.addRtiResources(matching.MatcherError, ["jaspr_router__src__matching|MatcherError"]);
  dart.addTypeCaches(matching.MatcherError);
  dart.setLibraryUri(matching.MatcherError, I[7]);
  dart.setFieldSignature(matching.MatcherError, () => dart.global.Object.setPrototypeOf({
    message: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    location: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(matching.MatcherError))));
  dart.defineExtensionMethods(matching.MatcherError, ['toString']);
  matching._getLocRouteRecursively = function _getLocRouteRecursively(opts) {
    let loc = opts && 'loc' in opts ? opts.loc : null;
    let restLoc = opts && 'restLoc' in opts ? opts.restLoc : null;
    let parentSubloc = opts && 'parentSubloc' in opts ? opts.parentSubloc : null;
    let routes = opts && 'routes' in opts ? opts.routes : null;
    let pathParameters = opts && 'pathParameters' in opts ? opts.pathParameters : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let result = null;
    let t$36$35subPathParameters = null;
    function t$36$35subPathParameters$35get() {
      let t$3626;
      t$3626 = t$36$35subPathParameters;
      return t$3626 == null ? dart.throw(new _internal.LateError.localNI("subPathParameters")) : t$3626;
    }
    function t$36$35subPathParameters$35set(subPathParameters$35param) {
      return t$36$35subPathParameters = subPathParameters$35param;
    }
    for (let route of routes) {
      t$36$35subPathParameters$35set(new (G.IdentityMapOfString$String()).new());
      let match = match$.RouteMatch.match({route: route, restLoc: restLoc, parentSubloc: parentSubloc, pathParameters: t$36$35subPathParameters$35get(), extra: extra});
      if (match == null) {
        continue;
      }
      if (T.Route()[_is](match.route) && match.subloc[$toLowerCase]() === loc[$toLowerCase]()) {
        result = G.JSArrayOfRouteMatch().of([match]);
      } else if (route.routes[$isEmpty]) {
        continue;
      } else {
        let childRestLoc = null;
        let newParentSubLoc = null;
        if (T.ShellRoute()[_is](match.route)) {
          childRestLoc = restLoc;
          newParentSubLoc = parentSubloc;
        } else {
          if (!loc[$startsWith](match.subloc)) dart.assertFailed(null, I[20], 224, 16, "loc.startsWith(match.subloc)");
          if (!restLoc[$isNotEmpty]) dart.assertFailed(null, I[20], 225, 16, "restLoc.isNotEmpty");
          childRestLoc = loc[$substring](match.subloc.length + (match.subloc === "/" ? 0 : 1));
          newParentSubLoc = match.subloc;
        }
        let subRouteMatch = matching._getLocRouteRecursively({loc: loc, restLoc: childRestLoc, parentSubloc: newParentSubLoc, routes: route.routes, pathParameters: t$36$35subPathParameters$35get(), extra: extra});
        if (subRouteMatch == null) {
          continue;
        }
        result = (() => {
          let t$3628 = G.JSArrayOfRouteMatch().of([match]);
          t$3628[$addAll](subRouteMatch);
          return t$3628;
        })();
      }
      break;
    }
    if (result != null) {
      pathParameters[$addAll](t$36$35subPathParameters$35get());
    }
    return result;
  };
  matching.errorScreen = function errorScreen(uri, errorMessage) {
    let error = core.Exception.new(errorMessage);
    return new matching.RouteMatchList.new(G.JSArrayOfRouteMatch().of([new match$.RouteMatch.new({subloc: uri.path, extra: null, error: error, route: new route.Route.new({path: dart.toString(uri), builder: dart.fn((context, state) => {
            dart.throw(new core.UnimplementedError.new());
          }, T.BuildContextAndRouteStateToNever())})})]), uri, C[0] || CT.C0);
  };
  var route$ = dart.privateName(match$, "RouteMatch.route");
  var subloc$0 = dart.privateName(match$, "RouteMatch.subloc");
  var extra$0 = dart.privateName(match$, "RouteMatch.extra");
  var error$1 = dart.privateName(match$, "RouteMatch.error");
  match$.RouteMatch = class RouteMatch extends core.Object {
    get route() {
      return this[route$];
    }
    set route(value) {
      super.route = value;
    }
    get subloc() {
      return this[subloc$0];
    }
    set subloc(value) {
      super.subloc = value;
    }
    get extra() {
      return this[extra$0];
    }
    set extra(value) {
      super.extra = value;
    }
    get error() {
      return this[error$1];
    }
    set error(value) {
      super.error = value;
    }
    static ['_#new#tearOff'](opts) {
      let route = opts && 'route' in opts ? opts.route : null;
      let subloc = opts && 'subloc' in opts ? opts.subloc : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let error = opts && 'error' in opts ? opts.error : null;
      return new match$.RouteMatch.new({route: route, subloc: subloc, extra: extra, error: error});
    }
    static match(opts) {
      let route = opts && 'route' in opts ? opts.route : null;
      let restLoc = opts && 'restLoc' in opts ? opts.restLoc : null;
      let parentSubloc = opts && 'parentSubloc' in opts ? opts.parentSubloc : null;
      let pathParameters = opts && 'pathParameters' in opts ? opts.pathParameters : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      if (T.ShellRoute()[_is](route)) {
        return new match$.RouteMatch.new({route: route, subloc: restLoc, extra: extra, error: null});
      } else if (T.Route()[_is](route)) {
        if (!!route.path[$contains]("//")) dart.assertFailed(null, I[21], 35, 14, "!route.path.contains('//')");
        let match = path_utils.matchPatternAsPrefix(route, restLoc);
        if (match == null) {
          return null;
        }
        let encodedParams = path_utils.extractPathParams(route, match);
        for (let param of encodedParams[$entries]) {
          pathParameters[$_set](param.key, core.Uri.decodeComponent(param.value));
        }
        let pathLoc = path_utils.patternToPath(route.path, encodedParams);
        let subloc = path_utils.concatenatePaths(parentSubloc, pathLoc);
        return new match$.RouteMatch.new({route: route, subloc: subloc, extra: extra, error: null});
      }
      dart.throw(new matching.MatcherError.new("Unexpected route type: " + dart.str(route), restLoc));
    }
  };
  (match$.RouteMatch.new = function(opts) {
    let route = opts && 'route' in opts ? opts.route : null;
    let subloc = opts && 'subloc' in opts ? opts.subloc : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let error = opts && 'error' in opts ? opts.error : null;
    this[route$] = route;
    this[subloc$0] = subloc;
    this[extra$0] = extra;
    this[error$1] = error;
    ;
  }).prototype = match$.RouteMatch.prototype;
  dart.addTypeTests(match$.RouteMatch);
  dart.addRtiResources(match$.RouteMatch, ["jaspr_router__src__match|RouteMatch"]);
  dart.addTypeCaches(match$.RouteMatch);
  dart.setStaticMethodSignature(match$.RouteMatch, () => ['match']);
  dart.setLibraryUri(match$.RouteMatch, I[22]);
  dart.setFieldSignature(match$.RouteMatch, () => dart.global.Object.setPrototypeOf({
    route: {type: T.RouteBase(), isConst: false, isFinal: true, libraryUri: I[12]},
    subloc: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    extra: {type: T.ObjectN(), isConst: false, isFinal: true, libraryUri: I[1]},
    error: {type: T.ExceptionN(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(match$.RouteMatch))));
  var errorBuilder$0 = dart.privateName(builder$, "RouteBuilder.errorBuilder");
  var configuration$1 = dart.privateName(builder$, "RouteBuilder.configuration");
  var _buildRoute = dart.privateName(builder$, "_buildRoute");
  var _buildRecursive = dart.privateName(builder$, "_buildRecursive");
  var _buildErrorPage = dart.privateName(builder$, "_buildErrorPage");
  var _callRouteBuilder = dart.privateName(builder$, "_callRouteBuilder");
  var _callShellRouteBuilder = dart.privateName(builder$, "_callShellRouteBuilder");
  builder$.RouteBuilder = class RouteBuilder extends core.Object {
    get errorBuilder() {
      return this[errorBuilder$0];
    }
    set errorBuilder(value) {
      super.errorBuilder = value;
    }
    get configuration() {
      return this[configuration$1];
    }
    set configuration(value) {
      super.configuration = value;
    }
    static ['_#new#tearOff'](opts) {
      let configuration = opts && 'configuration' in opts ? opts.configuration : null;
      let errorBuilder = opts && 'errorBuilder' in opts ? opts.errorBuilder : null;
      return new builder$.RouteBuilder.new({configuration: configuration, errorBuilder: errorBuilder});
    }
    build(router) {
      return new (T.SyncIterableOfComponent()).new((function* build() {
        if (router.matchList.isEmpty) {
          return;
        }
        yield new inherited_router.InheritedRouter.new({router: router, child: this[_buildRoute](router.matchList, router.routeLoaders)});
      }).bind(this));
    }
    [_buildRoute](matchList, loaders) {
      try {
        return this[_buildRecursive](matchList, 0, loaders);
      } catch (t$36$35e) {
        let e = dart.getThrown(t$36$35e);
        if (T._RouteBuilderError()[_is](e)) {
          return this[_buildErrorPage](e, matchList.uri);
        } else
          throw t$36$35e;
      }
    }
    [_buildRecursive](matchList, startIndex, loaders) {
      let match = matchList.matches[$_get](startIndex);
      if (match.error != null) {
        dart.throw(new builder$._RouteBuilderError.new("Match error found during build phase", {exception: match.error}));
      }
      let route = match.route;
      let state = this.buildState(matchList, match);
      if (T.Route()[_is](route)) {
        if (matchList.matches[$length] > startIndex + 1) {
          return this[_buildRecursive](matchList, startIndex + 1, loaders);
        }
        return this[_callRouteBuilder](state, route, loaders);
      } else if (T.ShellRoute()[_is](route)) {
        let child = this[_buildRecursive](matchList, startIndex + 1, loaders);
        return this[_callShellRouteBuilder](state, route, loaders, {child: child});
      }
      dart.throw(new builder$._RouteBuilderException.new("Unsupported route type " + dart.str(route)));
    }
    buildState(matchList, match) {
      let route = match.route;
      let name = null;
      let path = "";
      if (T.Route()[_is](route)) {
        name = route.name;
        path = route.path;
      }
      return new state$.RouteState.new({location: dart.toString(matchList.uri), subloc: match.subloc, name: name, path: path, fullpath: matchList.fullpath, params: G.LinkedHashMapOfString$String().from(matchList.pathParameters), error: match.error, queryParams: matchList.uri.queryParameters, queryParametersAll: matchList.uri.queryParametersAll, extra: match.extra});
    }
    [_callRouteBuilder](state, route, loaders) {
      let t$3633, t$3632, t$3631, t$3630;
      let builder = route.builder;
      if (builder == null) {
        dart.throw(new builder$._RouteBuilderError.new("No routeBuilder provided to Route: " + dart.str(route)));
      }
      let child = new basic.Builder.single({builder: dart.fn(c => builder(c, state), T.BuildContextToComponent())});
      if (T.LazyRoute()[_is](route)) {
        let l = (t$3630 = loaders, t$3631 = state.subloc, t$3632 = t$3630[$_get](t$3631), t$3632 == null ? (t$3633 = new router$.RouteLoader.from(route.load()), t$3630[$_set](t$3631, t$3633), t$3633) : t$3632);
        if (l.isPending) {
          let c = child;
          child = new async$.FutureBuilder.new({future: l.future, builder: dart.fn((context, snapshot) => new (T.SyncIterableOfComponent()).new((function*() {
              if (snapshot.connectionState === async$.ConnectionState.done) {
                if (snapshot.hasError) {
                  yield this[_buildErrorPage](new builder$._RouteBuilderError.new("Failed to load lazy route"), core.Uri.parse(state.location));
                  return;
                }
                yield c;
              }
            }).bind(this)), T.BuildContextAndAsyncSnapshotToIterableOfComponent())});
        }
      }
      return new inherited_router.InheritedRouteState.new({state: state, child: child});
    }
    [_callShellRouteBuilder](state, route, loaders, opts) {
      let t$3633, t$3632, t$3631, t$3630;
      let child = opts && 'child' in opts ? opts.child : null;
      let builder = route.builder;
      let routeChild = new basic.Builder.single({builder: dart.fn(c => builder(c, state, child), T.BuildContextToComponent())});
      if (T.LazyShellRoute()[_is](route)) {
        let l = (t$3630 = loaders, t$3631 = state.subloc, t$3632 = t$3630[$_get](t$3631), t$3632 == null ? (t$3633 = new router$.RouteLoader.from(route.load()), t$3630[$_set](t$3631, t$3633), t$3633) : t$3632);
        if (l.isPending) {
          let c = routeChild;
          routeChild = new async$.FutureBuilder.new({future: l.future, builder: dart.fn((context, snapshot) => new (T.SyncIterableOfComponent()).new((function*() {
              if (snapshot.connectionState === async$.ConnectionState.done) {
                if (snapshot.hasError) {
                  yield this[_buildErrorPage](new builder$._RouteBuilderError.new("Failed to load lazy shell route"), core.Uri.parse(state.location));
                  return;
                }
                yield c;
              }
            }).bind(this)), T.BuildContextAndAsyncSnapshotToIterableOfComponent())});
        }
      }
      return new inherited_router.InheritedRouteState.new({state: state, child: routeChild});
    }
    [_buildErrorPage](error, uri) {
      let state = new state$.RouteState.new({location: dart.toString(uri), subloc: uri.path, name: null, queryParams: uri.queryParameters, queryParametersAll: uri.queryParametersAll, error: core.Exception.new(error)});
      if (this.errorBuilder != null) {
        return new basic.Builder.single({builder: dart.fn(context => dart.nullCheck(this.errorBuilder)(context, state), T.BuildContextToComponent())});
      } else {
        return new error_screen.ErrorScreen.new(state.error);
      }
    }
  };
  (builder$.RouteBuilder.new = function(opts) {
    let configuration = opts && 'configuration' in opts ? opts.configuration : null;
    let errorBuilder = opts && 'errorBuilder' in opts ? opts.errorBuilder : null;
    this[configuration$1] = configuration;
    this[errorBuilder$0] = errorBuilder;
    ;
  }).prototype = builder$.RouteBuilder.prototype;
  dart.addTypeTests(builder$.RouteBuilder);
  dart.addRtiResources(builder$.RouteBuilder, ["jaspr_router__src__builder|RouteBuilder"]);
  dart.addTypeCaches(builder$.RouteBuilder);
  dart.setMethodSignature(builder$.RouteBuilder, () => dart.global.Object.setPrototypeOf({
    build: T.RouterStateToIterableOfComponent(),
    [_buildRoute]: T.RouteMatchListAndMapOfObject$RouteLoaderToComponent(),
    [_buildRecursive]: T.RouteMatchListAndintAndMapOfObject$RouteLoaderToComponent(),
    buildState: T.RouteMatchListAndRouteMatchToRouteState(),
    [_callRouteBuilder]: T.RouteStateAndRouteAndMapOfObject$RouteLoaderToComponent(),
    [_callShellRouteBuilder]: T.RouteStateAndShellRouteAndMapOfObject$RouteLoader__ToComponent(),
    [_buildErrorPage]: T._RouteBuilderErrorAndUriToComponent()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(builder$.RouteBuilder))));
  dart.setLibraryUri(builder$.RouteBuilder, I[5]);
  dart.setFieldSignature(builder$.RouteBuilder, () => dart.global.Object.setPrototypeOf({
    errorBuilder: {type: T.BuildContextAndRouteStateToNComponent(), isConst: false, isFinal: true},
    configuration: {type: T.RouteConfiguration(), isConst: false, isFinal: true, libraryUri: I[3]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(builder$.RouteBuilder))));
  builder$._RouteBuilderError = class _RouteBuilderError extends core.Error {
    static ['_#new#tearOff'](message, opts) {
      let exception = opts && 'exception' in opts ? opts.exception : null;
      return new builder$._RouteBuilderError.new(message, {exception: exception});
    }
    toString() {
      let t$3630;
      return this.message + " " + dart.str((t$3630 = this.exception, t$3630 == null ? "" : t$3630));
    }
  };
  (builder$._RouteBuilderError.new = function(message, opts) {
    let exception = opts && 'exception' in opts ? opts.exception : null;
    this.message = message;
    this.exception = exception;
    dart.global.Object.getPrototypeOf(builder$._RouteBuilderError).new.call(this);
    ;
  }).prototype = builder$._RouteBuilderError.prototype;
  dart.addTypeTests(builder$._RouteBuilderError);
  dart.addRtiResources(builder$._RouteBuilderError, ["jaspr_router__src__builder|_RouteBuilderError"]);
  dart.addTypeCaches(builder$._RouteBuilderError);
  dart.setLibraryUri(builder$._RouteBuilderError, I[5]);
  dart.setFieldSignature(builder$._RouteBuilderError, () => dart.global.Object.setPrototypeOf({
    message: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    exception: {type: T.ExceptionN(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(builder$._RouteBuilderError))));
  dart.defineExtensionMethods(builder$._RouteBuilderError, ['toString']);
  builder$._RouteBuilderException = class _RouteBuilderException extends core.Object {
    static ['_#new#tearOff'](message, opts) {
      let exception = opts && 'exception' in opts ? opts.exception : null;
      return new builder$._RouteBuilderException.new(message, {exception: exception});
    }
    toString() {
      let t$3630;
      return this.message + " " + dart.str((t$3630 = this.exception, t$3630 == null ? "" : t$3630));
    }
  };
  (builder$._RouteBuilderException.new = function(message, opts) {
    let exception = opts && 'exception' in opts ? opts.exception : null;
    this.message = message;
    this.exception = exception;
    ;
  }).prototype = builder$._RouteBuilderException.prototype;
  dart.addTypeTests(builder$._RouteBuilderException);
  dart.addRtiResources(builder$._RouteBuilderException, ["jaspr_router__src__builder|_RouteBuilderException", "core|Exception"]);
  dart.addTypeCaches(builder$._RouteBuilderException);
  dart.setLibraryUri(builder$._RouteBuilderException, I[5]);
  dart.setFieldSignature(builder$._RouteBuilderException, () => dart.global.Object.setPrototypeOf({
    message: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    exception: {type: T.ExceptionN(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(builder$._RouteBuilderException))));
  dart.defineExtensionMethods(builder$._RouteBuilderException, ['toString']);
  var children$ = dart.privateName(link, "Link.children");
  var to$ = dart.privateName(link, "Link.to");
  var replace$ = dart.privateName(link, "Link.replace");
  var extra$1 = dart.privateName(link, "Link.extra");
  var preload$ = dart.privateName(link, "Link.preload");
  var classes$ = dart.privateName(link, "Link.classes");
  var styles$ = dart.privateName(link, "Link.styles");
  var attributes$ = dart.privateName(link, "Link.attributes");
  link.Link = class Link extends framework.StatelessComponent {
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get to() {
      return this[to$];
    }
    set to(value) {
      super.to = value;
    }
    get replace() {
      return this[replace$];
    }
    set replace(value) {
      super.replace = value;
    }
    get extra() {
      return this[extra$1];
    }
    set extra(value) {
      super.extra = value;
    }
    get preload() {
      return this[preload$];
    }
    set preload(value) {
      super.preload = value;
    }
    get classes() {
      return this[classes$];
    }
    set classes(value) {
      super.classes = value;
    }
    get styles() {
      return this[styles$];
    }
    set styles(value) {
      super.styles = value;
    }
    get attributes() {
      return this[attributes$];
    }
    set attributes(value) {
      super.attributes = value;
    }
    static ['_#new#tearOff'](children, opts) {
      let to = opts && 'to' in opts ? opts.to : null;
      let replace = opts && 'replace' in opts ? opts.replace : false;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let preload = opts && 'preload' in opts ? opts.preload : true;
      let classes = opts && 'classes' in opts ? opts.classes : null;
      let styles = opts && 'styles' in opts ? opts.styles : null;
      let attributes = opts && 'attributes' in opts ? opts.attributes : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return new link.Link.new(children, {to: to, replace: replace, extra: extra, preload: preload, classes: classes, styles: styles, attributes: attributes, key: key});
    }
    build(context) {
      return new (T.SyncIterableOfComponent()).new((function* build() {
        let t$3635, t$3634, t$3633, t$3632, t$3631;
        t$3631 = this.to;
        t$3632 = this.classes;
        t$3633 = this.styles;
        t$3634 = this.attributes;
        t$3635 = (() => {
          let t$3630 = new (G.IdentityMapOfString$EventTovoid()).new();
          if (this.preload) t$3630[$_set]("mouseover", dart.fn(event => {
            let router = router$.Router.maybeOf(context);
            if (router != null) {
              router.preload(this.to);
            }
          }, T.EventTovoid()));
          t$3630[$_set]("click", dart.fn(event => {
            let router = router$.Router.maybeOf(context);
            if (router != null) {
              event.preventDefault();
              if (!this.replace) {
                router.push(this.to, {extra: this.extra});
              } else {
                router.replace(this.to, {extra: this.extra});
              }
            }
          }, T.EventTovoid()));
          return t$3630;
        })();
        yield html$.a(this.children, {href: t$3631, classes: t$3632, styles: t$3633, attributes: t$3634, events: t$3635});
      }).bind(this));
    }
  };
  (link.Link.new = function(children, opts) {
    let to = opts && 'to' in opts ? opts.to : null;
    let replace = opts && 'replace' in opts ? opts.replace : false;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let preload = opts && 'preload' in opts ? opts.preload : true;
    let classes = opts && 'classes' in opts ? opts.classes : null;
    let styles = opts && 'styles' in opts ? opts.styles : null;
    let attributes = opts && 'attributes' in opts ? opts.attributes : null;
    let key = opts && 'key' in opts ? opts.key : null;
    this[children$] = children;
    this[to$] = to;
    this[replace$] = replace;
    this[extra$1] = extra;
    this[preload$] = preload;
    this[classes$] = classes;
    this[styles$] = styles;
    this[attributes$] = attributes;
    dart.global.Object.getPrototypeOf(link.Link).new.call(this, {key: key});
    ;
  }).prototype = link.Link.prototype;
  dart.addTypeTests(link.Link);
  dart.addRtiResources(link.Link, ["jaspr_router__src__link|Link"]);
  dart.addTypeCaches(link.Link);
  dart.setMethodSignature(link.Link, () => dart.global.Object.setPrototypeOf({build: T.BuildContextToIterableOfComponent()}, dart.getMethods(dart.global.Object.getPrototypeOf(link.Link))));
  dart.setLibraryUri(link.Link, I[23]);
  dart.setFieldSignature(link.Link, () => dart.global.Object.setPrototypeOf({
    children: {type: T.ListOfComponent(), isConst: false, isFinal: true, libraryUri: I[1]},
    to: {type: T.String(), isConst: false, isFinal: true, libraryUri: I[1]},
    replace: {type: T.bool(), isConst: false, isFinal: true, libraryUri: I[1]},
    extra: {type: T.ObjectN(), isConst: false, isFinal: true, libraryUri: I[1]},
    preload: {type: T.bool(), isConst: false, isFinal: true, libraryUri: I[1]},
    classes: {type: T.StringN(), isConst: false, isFinal: true, libraryUri: I[1]},
    styles: {type: T.StylesN(), isConst: false, isFinal: true, libraryUri: I[24]},
    attributes: {type: T.MapNOfString$String(), isConst: false, isFinal: true, libraryUri: I[1]}
  }, dart.getFields(dart.global.Object.getPrototypeOf(link.Link))));
  dart.moduleConstCaches.set("packages/jaspr_router/jaspr_router", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|Iterable":{"Iterable.E":"1"},"async|Future":{"Future.T":"1"},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|Map":{"Map.K":"1","Map.V":"2"},"jaspr__src__framework__framework|StatefulElement":{"jaspr__src__framework__framework|MultiChildElement":[],"jaspr__src__framework__framework|Element":[],"jaspr__src__framework__framework|BuildContext":[]},"jaspr__src__framework__framework|MultiChildElement":{"jaspr__src__framework__framework|Element":[],"jaspr__src__framework__framework|BuildContext":[]},"jaspr__src__framework__framework|Element":{"jaspr__src__framework__framework|BuildContext":[]},"jaspr_router__src__router|RouterState":{"State.T":"jaspr_router__src__router|Router","jaspr__src__framework__framework|State":["jaspr_router__src__router|Router"],"PreloadStateMixin.T":"jaspr_router__src__router|Router","jaspr__src__framework__framework|PreloadStateMixin":["jaspr_router__src__router|Router"]},"jaspr__src__framework__framework|State":{"State.T":"1"},"jaspr_router__src__router|Router":{"jaspr__src__framework__framework|StatefulComponent":[],"jaspr__src__framework__framework|Component":[]},"jaspr__src__framework__framework|PreloadStateMixin":{"PreloadStateMixin.T":"1","State.T":"1","jaspr__src__framework__framework|State":["1"]},"jaspr__src__framework__framework|StatefulComponent":{"jaspr__src__framework__framework|Component":[]},"jaspr_router__src__misc__inherited_router|InheritedRouter":{"jaspr__src__framework__framework|InheritedComponent":[],"jaspr__src__framework__framework|Component":[]},"jaspr__src__framework__framework|InheritedComponent":{"jaspr__src__framework__framework|Component":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"jaspr_router__src__route|ShellRoute":{"jaspr_router__src__route|RouteBase":[]},"jaspr_router__src__route|Route":{"jaspr_router__src__route|RouteBase":[]},"core|StringBuffer":{"core|StringSink":[]},"jaspr_router__src__misc__inherited_router|InheritedRouteState":{"jaspr__src__framework__framework|InheritedComponent":[],"jaspr__src__framework__framework|Component":[]},"core|RegExp":{"core|Pattern":[]},"core|RegExpMatch":{"core|Match":[]},"html|PopStateEvent":{"html|Event":[],"_interceptors|JavaScriptObject":[],"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"html|Event":{"_interceptors|JavaScriptObject":[],"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"_interceptors|JavaScriptObject":{"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"jaspr__src__foundation__binding|AppBinding":{"jaspr__src__foundation__sync|SyncBinding":[],"jaspr__src__foundation__scheduler|SchedulerBinding":[]},"jaspr_router__src__matching|MatcherError":{"core|Error":[]},"jaspr_router__src__redirection|RedirectionError":{"core|Error":[],"core|UnsupportedError":[]},"core|UnsupportedError":{"core|Error":[]},"jaspr_router__src__builder|_RouteBuilderError":{"core|Error":[]},"jaspr_router__src__route|LazyRoute":{"jaspr_router__src__route|Route":[],"jaspr_router__src__route|LazyRouteMixin":[],"jaspr_router__src__route|RouteBase":[]},"jaspr__src__components__async|AsyncSnapshot":{"AsyncSnapshot.T":"1"},"jaspr_router__src__route|LazyShellRoute":{"jaspr_router__src__route|ShellRoute":[],"jaspr_router__src__route|LazyRouteMixin":[],"jaspr_router__src__route|RouteBase":[]},"jaspr__src__foundation__styles__styles|Styles":{"StylesMixin.T":"jaspr__src__foundation__styles__styles|Styles","jaspr__src__foundation__styles__styles|StylesMixin":["jaspr__src__foundation__styles__styles|Styles"]},"jaspr__src__foundation__styles__styles|StylesMixin":{"StylesMixin.T":"1"},"jaspr_router__src__misc__error_screen|ErrorScreen":{"jaspr__src__framework__framework|StatelessComponent":[],"jaspr__src__framework__framework|Component":[]},"jaspr__src__framework__framework|StatelessComponent":{"jaspr__src__framework__framework|Component":[]},"jaspr_router__src__misc__errors|RouterError":{"core|Error":[]},"jaspr_router__src__platform__platform_web|PlatformRouterImpl":{"jaspr_router__src__platform__platform|PlatformRouter":[]},"jaspr_router__src__platform__platform_web|HistoryManagerImpl":{"jaspr_router__src__platform__platform|HistoryManager":[]},"jaspr_router__src__platform__platform_web|RouteRegistryImpl":{"jaspr_router__src__platform__platform|RouteRegistry":[]},"jaspr_router__src__builder|_RouteBuilderException":{"core|Exception":[]},"jaspr_router__src__link|Link":{"jaspr__src__framework__framework|StatelessComponent":[],"jaspr__src__framework__framework|Component":[]}}'));
  dart.trackLibraries("packages/jaspr_router/jaspr_router", {
    "package:jaspr_router/src/misc/error_screen.dart": error_screen,
    "package:jaspr_router/src/misc/extensions.dart": extensions,
    "package:jaspr_router/src/router.dart": router$,
    "package:jaspr_router/src/typedefs.dart": typedefs,
    "package:jaspr_router/src/configuration.dart": configuration,
    "package:jaspr_router/src/state.dart": state$,
    "package:jaspr_router/src/misc/inherited_router.dart": inherited_router,
    "package:jaspr_router/src/route.dart": route,
    "package:jaspr_router/src/path_utils.dart": path_utils,
    "package:jaspr_router/src/misc/errors.dart": errors,
    "package:jaspr_router/src/platform/platform.dart": platform,
    "package:jaspr_router/src/platform/platform_web.dart": platform_web,
    "package:jaspr_router/src/parser.dart": parser,
    "package:jaspr_router/src/redirection.dart": redirection,
    "package:jaspr_router/src/matching.dart": matching,
    "package:jaspr_router/src/match.dart": match$,
    "package:jaspr_router/src/builder.dart": builder$,
    "package:jaspr_router/src/link.dart": link,
    "package:jaspr_router/jaspr_router.dart": jaspr_router
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["src/misc/error_screen.dart","src/misc/extensions.dart","src/router.dart","src/configuration.dart","src/state.dart","src/misc/inherited_router.dart","src/route.dart","src/path_utils.dart","src/misc/errors.dart","src/platform/platform.dart","src/platform/platform_web.dart","src/parser.dart","src/redirection.dart","src/matching.dart","src/match.dart","src/builder.dart","src/link.dart"],"names":[],"mappings":"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","file":"jaspr_router.ddc.js"}');
  // Exports:
  return {
    src__misc__error_screen: error_screen,
    src__misc__extensions: extensions,
    src__router: router$,
    src__typedefs: typedefs,
    src__configuration: configuration,
    src__state: state$,
    src__misc__inherited_router: inherited_router,
    src__route: route,
    src__path_utils: path_utils,
    src__misc__errors: errors,
    src__platform__platform: platform,
    src__platform__platform_web: platform_web,
    src__parser: parser,
    src__redirection: redirection,
    src__matching: matching,
    src__match: match$,
    src__builder: builder$,
    src__link: link,
    jaspr_router: jaspr_router
  };
}));

//# sourceMappingURL=jaspr_router.ddc.js.map
